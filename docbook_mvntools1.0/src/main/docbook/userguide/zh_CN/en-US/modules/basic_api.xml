<chapter id="api">
   <title>用户 <glossterm linkend="api_gloss">API</glossterm></title>
   <section>
      <title>API 类</title>
      <para>
         <literal>Cache</literal>
         接口是与 JBoss Cache 交互的主要结构。
         使用<literal>CacheFactory</literal>可以构造<literal>Cache</literal>，
         也可以用它启动<literal>Cache</literal>。
         <literal>CacheFactory</literal>
         允许你通过<literal>Configuration</literal>对象或一个 XML 文件创建一个
         <literal>Cache</literal>。
         一旦你引用一个<literal>Cache</literal>实例，
         你就可以用它在树形结构里面查找<literal>Node</literal>对象，
         并在树形结构里面存储数据。
         <mediaobject>
            <imageobject>
               <imagedata fileref="PublicAPI.png" format="PNG"/>
            </imageobject>
         </mediaobject>

      </para>


      <para>
         查看一下上述接口的 javadoc 是学习 API 的最好方法。
         在下面文档里，我们将涵盖一些要点。
      </para>
   </section>

   <section id="api.create_start">
      <title>初始化和启动缓存</title>
      <para>
         <literal>Cache</literal>接口的实例只能经由
         <literal>CacheFactory</literal>
         创建。（这不像 JBoss Cache 1.x，旧的<literal>TreeCache</literal>实例可以直接初始化）
      </para>
      <para>
         <literal>CacheFactory</literal> 提供一些创建 <literal>Cache</literal>
         的可重载方法，但是他们都做相同的事情：
         <itemizedlist>
            <listitem>或者通过传过来的方法参数，或者通过分析 XML 内容构建这两种方法，
            获得对 <literal>Configuration</literal> 的访问。
            XML 内容可以来自提供的一个输入流，或者一个类路径或文件系统位置。
            请查看
               <link linkend="configuration">有关配置的章节</link>，
               得到更多有关
               <literal>Configuration</literal> 的信息。
            </listitem>
            <listitem>初始化
               <literal>Cache</literal>，
               并给它提供一个 <literal>Configuration</literal> 引用。
            </listitem>
            <listitem>有选择地调用缓存的
               <literal>create()</literal>
               和
               <literal>start()</literal>
               方法。
            </listitem>
         </itemizedlist>
      </para>

      <para>
         下面是一个创建和启动缓存机制的最简单例子，它使用缺省的配置值：
      </para>

      <programlisting role="JAVA"><![CDATA[
   CacheFactory factory = new DefaultCacheFactory();
   Cache cache = factory.createCache();
      ]]></programlisting>

      <para>下面的例子，我们让
         <literal>CacheFactory</literal>
         查找和分析类路径上的一个配置文件：
      </para>

      <programlisting role="JAVA"><![CDATA[
   CacheFactory factory = new DefaultCacheFactory();
   Cache cache = factory.createCache("cache-configuration.xml");
      ]]></programlisting>

      <para>下面的例子，我们还是通过一个文件配置缓存，
      但是希望通过编程修改配置元素。所以，我们让工厂不要启动缓存，
      而是我们自己启动它：
      </para>

      <programlisting role="JAVA"><![CDATA[
   CacheFactory factory = new DefaultCacheFactory();
   Cache cache = factory.createCache("cache-configuration.xml", false);
   Configuration config = cache.getConfiguration();
   config.setClusterName(this.getClusterName());

   // Have to create and start cache before using it
   cache.create();
   cache.start();
      ]]></programlisting>

   </section>

   <section>
      <title>缓存数据和取回数据</title>

      <para>下面，让我们使用
         <literal>Cache</literal>
         API 来访问一个缓存中的
         <literal>Node</literal>，
         并对那个节点做一些简单的读和写。
      </para>
      <programlisting role="JAVA"><![CDATA[
   // Let's get ahold of the root node.
   Node rootNode = cache.getRoot();

   // Remember, JBoss Cache stores data in a tree structure.
   // All nodes in the tree structure are identified by Fqn objects.
   Fqn peterGriffinFqn = Fqn.fromString("/griffin/peter");

   // Create a new Node
   Node peterGriffin = rootNode.addChild(peterGriffinFqn);

   // let's store some data in the node
   peterGriffin.put("isCartoonCharacter", Boolean.TRUE);
   peterGriffin.put("favouriteDrink", new Beer());

   // some tests (just assume this code is in a JUnit test case)
   assertTrue(peterGriffin.get("isCartoonCharacter"));
   assertEquals(peterGriffinFqn, peterGriffin.getFqn());
   assertTrue(rootNode.hasChild(peterGriffinFqn));

   Set keys = new HashSet();
   keys.add("isCartoonCharacter");
   keys.add("favouriteDrink");

   assertEquals(keys, peterGriffin.getKeys());

   // let's remove some data from the node
   peterGriffin.remove("favouriteDrink");

   assertNull(peterGriffin.get("favouriteDrink");

   // let's remove the node altogether
   rootNode.removeChild(peterGriffinFqn);

   assertFalse(rootNode.hasChild(peterGriffinFqn));
      ]]></programlisting>

      <para>
         <literal>Cache</literal> 接口以一个 <link linkend="basic_api.fqn">Fqn</link>
         作为参数，暴露存/取/移动操作：
      </para>

      <programlisting role="JAVA"><![CDATA[
   Fqn peterGriffinFqn = Fqn.fromString("/griffin/peter");

   cache.put(peterGriffinFqn, "isCartoonCharacter", Boolean.TRUE);
   cache.put(peterGriffinFqn, "favouriteDrink", new Beer());

   assertTrue(peterGriffin.get(peterGriffinFqn, "isCartoonCharacter"));
   assertTrue(cache.getRootNode().hasChild(peterGriffinFqn));

   cache.remove(peterGriffinFqn, "favouriteDrink");

   assertNull(cache.get(peterGriffinFqn, "favouriteDrink");

   cache.removeNode(peterGriffinFqn);

   assertFalse(cache.getRootNode().hasChild(peterGriffinFqn));
      ]]></programlisting>
   </section>

   <section id="basic_api.fqn">
      <title>
         <literal>Fqn</literal> 类
      </title>

      <para>
         前一个章节在它的例子中使用了
         <literal>Fqn</literal> 类，现在让我们学习一些有关这个类的知识。
      </para>

      <para>
         一个全路径名（Fully Qualified Name，Fqn）封装了缓存树结构上某一个特定位置的路径名列表。
         列表里的这些元素一般是 <literal>String</literal> ，但也可以是任何
         <literal>Object</literal> 或者不同类型的混合。
      </para>

      <para>
         这个路径可以是绝对的（例如，相对于根节点），或者相对于缓存中的任一节点。
         阅读使用<literal>Fqn</literal>的 API 调用文档，
         会告诉你这个 API 是希望相对的还是绝对的 <literal>Fqn</literal>。
      </para>

      <para>
         <literal>Fqn</literal> 类提供了多个构造子，
         查看 javadoc 了解所有的可能情况。
         下面的例子举例说明创建一个 Fqn 的最常使用方法：
      </para>

      <programlisting role="JAVA"><![CDATA[
   // Create an Fqn pointing to node 'Joe' under parent node 'Smith'
   // under the 'people' section of the tree
	    
   // Parse it from a String
   Fqn<String> abc = Fqn.fromString("/people/Smith/Joe/");
	    
   // Build it directly. Marginally more efficient to construct than parsing
   String[] strings = new String[] { "people", "Smith", "Joe" };
   Fqn<String> abc = new Fqn<String>(strings);
	    
   // Here we want to use types other than String
   Object[] objs = new Object[]{ "accounts", "NY", new Integer(12345) };
   Fqn<Object> acctFqn = new Fqn<Object>(objs);
     ]]></programlisting>

      <para>注意这个</para>
      <programlisting role="JAVA"><![CDATA[Fqn<String> f = new Fqn<String>("/a/b/c");]]></programlisting>
      <para>与下面的<emphasis>不同</emphasis>
      </para>
      <programlisting role="JAVA"><![CDATA[Fqn<String> f = Fqn.fromString("/a/b/c");]]></programlisting>

      <para>
         前者用一个简单元素构造了一个 Fqn，叫做“/a/b/c”，直接挂在缓存根下。
         后者将构建一个三个元素的 Fqn，其中“c”是“b”的子节点，
         “b”是“a”的子节点，“a”挂在缓存根结点下。
         另一个辨别方法是，只有“/”分割符作为字符串传递给
         <literal>Fqn.fromString()</literal>时才被解析，其他情况不解析。
      </para>

      <para>
         1.x 版本的 JBoss Cache API 包括很多方便的重载方法，这些方法接受
         <literal>/a/b/c</literal> 格式的字符串，而不是一个
         <literal>Fqn</literal>。
         为了简化 API，在 JBC 2.x API 中没有再提供这些方便的重载方法。
      </para>

   </section>

   <section>
      <title>停止和撤销缓存</title>
      <para>
         在使用完毕后，停止和撤销缓存是一个好的实践方式，
         特别是当是个集群缓存并使用了 JGroups 通道。
         停止和撤销缓存，能够保证象 JGroups 通道这类资源被正确地清理。
      </para>

      <programlisting role="JAVA"><![CDATA[
   cache.stop();
   cache.destroy();
      ]]></programlisting>

      <para>
         不仅缓存在调用 <literal>stop()</literal> 后，能通过一个新的
         <literal>start()</literal> 调用重新启动；类似地，
         缓存在调用
         <literal>destroy()</literal>后，能通过一个新的
         <literal>create()</literal> 调用重新创建
         （然后通过一个<literal>start()</literal>重新启动）。
      </para>
   </section>

   <section>
      <title>缓存模式</title>
      <para>
         虽然从技术上讲这不是 API 的一部分，但是缓存配置的
         <emphasis>模式</emphasis>将影响任何集群范围的
         <literal>put</literal> 和 <literal>remove</literal> 操作表现。
         因此，我们在这里将简明地叙述不同的模式。
      </para>
      <para>
         JBoss Cache 模式由
         <literal>org.jboss.cache.config.Configuration.CacheMode</literal>
         枚举类型表示。它们包括：
         <itemizedlist>
            <listitem>
               <emphasis>LOCAL</emphasis>
               - 本地，非集群缓存。本地缓存不参与集群，也不同集群里的其他缓存通信。
               因此，他们的内容也不用串行化。但是，我们推荐将他们串行化，
               这样将来的某一天想要改变缓存模式时允许一定的灵活性。
            </listitem>
            <listitem>
               <emphasis>REPL_SYNC</emphasis>
               - 同步复制。复制缓存将所有的变化复制到集群中的其他缓存。
               同步复制意味着，复制变化时，调用是阻塞的，直到收到复制确认。
            </listitem>
            <listitem>
               <emphasis>REPL_ASYNC</emphasis>
               - 异步复制。与上面的 REPL_SYNC 类似，
               复制缓存将所有的变化复制到集群中的其他缓存。
               因为异步，调用者不用阻塞直到收到复制确认。
            </listitem>
            <listitem>
               <emphasis>INVALIDATION_SYNC</emphasis>
               - 如果缓存配置为失效而不是复制，
               每次缓存里数据更新，集群里的其他缓存将收到通知消息，
               通知他们的数据已经陈旧了，应该从内存中驱逐。
               这将减少复制的开销，然而仍然能够使远程缓存中的陈旧数据失效。
            </listitem>
            <listitem>
               <emphasis>INVALIDATION_ASYNC</emphasis>
               - 象上面一样，但是这个失效模式是用异步的方式广播失效消息的。
            </listitem>
         </itemizedlist>
      </para>
      <para>查看
         <link linkend="clustering">有关集群的章节</link>，
         了解缓存模式如何影响表现的更详细信息。
         查看
         <link linkend="configuration">有关配置的章节</link>，
         了解如何配置缓存模式的信息。
      </para>
   </section>

   <section id="api.listener">
      <title>
         添加缓存监听器 - 注册缓存事件
      </title>
      <para>
         JBoss Cache 提供一个注册缓存事件通知的方便机制。
      </para>
      <programlisting role="JAVA"><![CDATA[
   Object myListener = new MyCacheListener();
   cache.addCacheListener(myListener);
      ]]></programlisting>
      <para>
         移除和查询已注册监听器的方法与此类似。查看有关
         <literal>Cache</literal> 接口的javadoc，了解更详细内容。
      </para>
      <para>
         基本上，任意公开类型都能用作监听器，
         只要给它添加 <literal>@CacheListener</literal> 注释。
         另外，这个类还需要在一个或多个方法上添加某个方法层注释（
         在 <literal>org.jboss.cache.notifications.annotation</literal> 包里）。
         这样的注释方法需要是 public，有一个 void 返回类型，
         并接受单一
         <literal>org.jboss.cache.notifications.event.Event</literal>
         类型参数或其子类。

         <itemizedlist>
            <listitem>
               <para>
                  <literal>@CacheStarted</literal>
                  - 这样注释的方法，当缓存启动时接到通知。
                  方法需要接受
                  <literal>CacheStartedEvent</literal> 指定的参数类型。
               </para>
            </listitem>

            <listitem>
               <para>
                  <literal>@CacheStopped</literal>
                  - 这样注释的方法，当缓存停止时接到通知。
                  方法需要接受
                  <literal>CacheStoppedEvent</literal> 指定的参数类型。
               </para>
            </listitem>

            <listitem>
               <para>
                  <literal>@NodeCreated</literal>
                  - 这样注释的方法，当一个节点被构建时接到通知。
                  方法需要接受
                  <literal>NodeCreatedEvent</literal> 指定的参数类型。
               </para>
            </listitem>

            <listitem>
               <para>
                  <literal>@NodeRemoved</literal>
                  - 这样注释的方法，当一个节点被移除时接到通知。
                 方法需要接受
                  <literal>NodeRemovedEvent</literal> 指定的参数类型。
               </para>
            </listitem>

            <listitem>
               <para>
                  <literal>@NodeModified</literal>
                  - 这样注释的方法，当一个节点被修改时接到通知。
                  方法需要接受
                  <literal>NodeModifiedEvent</literal> 指定的参数类型。
               </para>
            </listitem>

            <listitem>
               <para>
                  <literal>@NodeMoved</literal>
                  - 这样注释的方法，当一个节点被移动时接到通知。
                  方法需要接受
                  <literal>NodeMovedEvent</literal> 指定的参数类型。
               </para>
            </listitem>

            <listitem>
               <para>
                  <literal>@NodeVisited</literal>
                  - 这样注释的方法，当一个节点被启动时接到通知。
                  方法需要接受
                  <literal>NodeVisitedEvent</literal> 指定的参数类型。
               </para>
            </listitem>

            <listitem>
               <para>
                  <literal>@NodeLoaded</literal>
                  - 这样注释的方法，当一个节点从 <literal>CacheLoader</literal>
                  被加载时接到通知。
                  方法需要接受
                  <literal>NodeLoadedEvent</literal> 指定的参数类型。
               </para>
            </listitem>

            <listitem>
               <para>
                  <literal>@NodeEvicted</literal>
                  - 这样注释的方法，当一个节点被从内存驱逐时接到通知。
                  方法需要接受
                  <literal>NodeEvictedEvent</literal> 指定的参数类型。
               </para>
            </listitem>

            <listitem>
               <para>
                  <literal>@NodeActivated</literal>
                  - 这样注释的方法，当一个节点被激活时接到通知。
                  方法需要接受
                  <literal>NodeActivatedEvent</literal> 指定的参数类型。
               </para>
            </listitem>

            <listitem>
               <para>
                  <literal>@NodePassivated</literal>
                  - 这样注释的方法，当一个节点被钝化时接到通知。
                  方法需要接受
                  <literal>NodePassivatedEvent</literal> 指定的参数类型。
               </para>
            </listitem>

            <listitem>
               <para>
                  <literal>@TransactionRegistered</literal>
                  - 这样注释的方法，当缓存向一个注册的事务管理器注册一个
                  <literal>javax.transaction.Synchronization</literal> 时接到通知。
                  方法需要接受
                  <literal>TransactionRegisteredEvent</literal> 指定的参数类型。
               </para>
            </listitem>

            <listitem>
               <para>
                  <literal>@TransactionCompleted</literal>
                  - 这样注释的方法，当缓存从一个注册事务管理器接到提交或回滚调用时接到通知。
                  方法需要接受
                  <literal>TransactionCompletedEvent</literal> 指定的参数类型。
               </para>
            </listitem>

            <listitem>
               <para>
                  <literal>@ViewChanged</literal>
                  - 这样注释的方法，当集群修改组结构时接到通知。
                  方法需要接受
                  <literal>ViewChangedEvent</literal> 指定的参数类型。
               </para>
            </listitem>

            <listitem>
               <para>
                  <literal>@CacheBlocked</literal>
                  - 这样注释的方法，当集群因为状态转移事件要求缓存被阻塞时接到通知。
                  方法需要接受
                  <literal>CacheBlockedEvent</literal> 指定的参数类型。
               </para>
            </listitem>

            <listitem>
               <para>
                  <literal>@CacheUnblocked</literal>
                  - 这样注释的方法，当集群在状态转移事件之后缓存操作已经解除阻塞时接到通知。
                  方法需要接受
                  <literal>CacheUnblockedEvent</literal> 指定的参数类型。
               </para>
            </listitem>

         </itemizedlist>
      </para>
      <para>
         需要时候，参考注释的 javadoc，
         还有传递进你方法的 <literal>Event</literal> 子类型的详细信息。
      </para>
      <para>
         例子：
      </para>
      <programlisting role="JAVA"><![CDATA[
   @CacheListener
   public class MyListener
   {

      @CacheStarted
      @CacheStopped
      public void cacheStartStopEvent(Event e)
      {
         switch (e.getType())
         {
            case Event.Type.CACHE_STARTED:
               System.out.println("Cache has started");
               break;
            case Event.Type.CACHE_STOPPED:
               System.out.println("Cache has stopped");
               break;
         }
      }

      @NodeCreated
      @NodeRemoved
      @NodeVisited
      @NodeModified
      @NodeMoved
      public void logNodeEvent(NodeEvent ne)
      {
         log("An event on node " + ne.getFqn() + " has occured");
      }
   }
         ]]></programlisting>
   </section>

   <section>
      <title>使用缓存加载器</title>
      <para>
         缓存加载器是 JBoss Cache 的一个重要组成部分。
         他们允许将节点持久化到磁盘或远程缓存集群，
         当缓存运行内存溢出时，允许钝化。
         另外，缓存加载器允许 JBoss Cache 实现“温和启动”，
         其中内存状态可以从持久存储中预先加载。
         JBoss Cache 带有几个缓存加载器实现。
         <itemizedlist>
            <listitem>
               <literal>org.jboss.cache.loader.FileCacheLoader</literal>
               - 一个基本的、基于文件系统的缓存加载器，它将数据持久化到磁盘。
               不支持事务，性能也一般，但却是一个非常简单的解决方案。
               主要用于测试，不推荐在产品中使用。
            </listitem>
            <listitem>
               <literal>org.jboss.cache.loader.JDBCCacheLoader</literal>
               - 使用 <glossterm linkend="jdbc">JDBC</glossterm> 连接持久化数据。
               在一个内部连接池（使用 c3p0 连接池库）中或从配置数据源，创建和维护连接。
               缓存加载器连接的数据库位置可以是本地的或远程的。
            </listitem>
            <listitem>
               <literal>org.jboss.cache.loader.BdbjeCacheLoader</literal>
               - 使用 Oracle 的基于文件的事务数据库 BerkeleyDB 来持久化数据。
               支持事务，性能良好，但是潜在地有许可证限制。
            </listitem>
            <listitem>
               <literal>org.jboss.cache.loader.JdbmCacheLoader</literal>
               - 一个即将面世的开源 BerkeleyDB 替代品。
            </listitem>
            <listitem>
               <literal>org.jboss.cache.loader.tcp.TcpCacheLoader</literal>
               - 使用 TCP 套接字将数据“持久化”到一个远程集群。
               使用“远程缓存”模式。
               <footnote>
                  <para>http://wiki.jboss.org/wiki/Wiki.jsp?page=JBossClusteringPatternFarCache</para>
               </footnote>
            </listitem>
            <listitem>
               <literal>org.jboss.cache.loader.ClusteredCacheLoader</literal>
               - 用作“只读”缓存加载器，集群中的其他节点在这里查询状态。
            </listitem>
         </itemizedlist>
         有关这些缓存加载器的高级主题和调整问题，在
         <link linkend="cache_loaders">缓存加载器专题章节</link>讨论。
         .
      </para>
   </section>

   <section>
      <title>使用驱逐策略</title>
      <para>
         驱逐策略与缓存加载器是配对出现的。它们都是保证缓存不发生内存溢出的必要条件。
         当缓存开始装填，驱逐算法在一个单独线程运行，
         将内存状态卸载到缓存加载器并且空出内存。
         驱逐策略可以基于区域配置，因此缓存中的不同子树可以有不同的驱逐参数。

         JBoss Cache 带有几个驱逐策略：
         <itemizedlist>
            <listitem>
               <literal>org.jboss.cache.eviction.LRUPolicy</literal>
               - 这个驱逐策略在达到临界值时，驱逐最近最少使用的节点。
            </listitem>
            <listitem>
               <literal>org.jboss.cache.eviction.LFUPolicy</literal>
               - 这个驱逐策略在达到临界值时，驱逐不频繁使用的节点。
            </listitem>
            <listitem>
               <literal>org.jboss.cache.eviction.MRUPolicy</literal>
               - 这个驱逐策略在达到临界值时，驱逐最近最新使用的节点。
            </listitem>
            <listitem>
               <literal>org.jboss.cache.eviction.FIFOPolicy</literal>
               - 这个驱逐策略在达到临界值时，建立一个先进先出队列驱逐最旧节点。
            </listitem>
            <listitem>
               <literal>org.jboss.cache.eviction.ExpirationPolicy</literal>
               - 这个驱逐策略根据每个节点配置的过期时间驱逐节点。
            </listitem>
            <listitem>
               <literal>org.jboss.cache.eviction.ElementSizePolicy</literal>
               - 这个驱逐策略基于节点中存储的键/值对数量驱逐节点。
            </listitem>
         </itemizedlist>
         详细的配置信息以及实现自定义的驱逐策略，在
         <link linkend="eviction_policies">驱逐策略专题章节</link>讨论。
         .
      </para>
   </section>
</chapter>
