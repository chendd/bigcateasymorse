<chapter id="configuration">
   <title>配置</title>

   <section>
      <title>配置概述</title>

      <para>
         <literal>org.jboss.cache.config.Configuration</literal>
         类（以及它的 <link linkend="configuration.elements">组件</link>）
         是一个 Java Bean，封装了 <literal>Cache</literal> 的配置信息以及它的所有框架元素
         （缓存加载器，驱逐策略等）。
      </para>

      <para>
         <literal>Configuration</literal> 暴露很多属性，这些属性在这本书的
         <link linkend="configuration_reference">参考配置</link>章节总结，
         很多属性都是在后面章节讨论。
         每当你看到本书讨论的配置选项，你都可以假定
         <literal>Configuration</literal> 
         类或者它的组件为这个配置选项暴露一个简单的 setter/getter 属性。
      </para>

   </section>

   <section id="configuration.creation">
      <title>构建一个
         <literal>Configuration</literal>
      </title>

      <para>
         在
         <link linkend="api.create_start">用户 API 部分</link>中讨论过，
         在构建 <literal>Cache</literal> 之前，
         必须提供一个 <literal>CacheFactory</literal>，
         并给<literal>CacheFactory</literal>一个
         <literal>Configuration</literal> 对象，
         <literal>Configuration</literal>也可以从一个文件名或输入流通过解析XML构建。
         下面的部分将讨论如果实现上述这个方法。
      </para>

      <section>
         <title>解析基于 XML 的配置文件</title>
         <para>
            通过一个 XML 文件来配置 JBoss Cache 是最方便的方法。
            JBoss Cache 的发布程序带有一些常用用例的配置文件。
            作为起点，推荐你使用这些文件，根据特殊需求做微调。
         </para>

         <para>
            这有一个简单的样本配置文件：
         </para>
         <programlisting role="XML"><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>

<!-- ===================================================================== -->
<!--                                                                       -->
<!--  Sample JBoss Cache Service Configuration                             -->
<!--                                                                       -->
<!-- ===================================================================== -->

<server>
   
   <mbean code="org.jboss.cache.jmx.CacheJmxWrapper" name="jboss.cache:service=Cache">
   
      <!-- Configure the TransactionManager -->
      <attribute name="TransactionManagerLookupClass">
         org.jboss.cache.transaction.GenericTransactionManagerLookup
      </attribute>

      <!-- Node locking level : SERIALIZABLE
                                REPEATABLE_READ (default)
                                READ_COMMITTED
                                READ_UNCOMMITTED
                                NONE             -->
      <attribute name="IsolationLevel">READ_COMMITTED</attribute>

      <!-- Lock parent before doing node additions/removes -->
      <attribute name="LockParentForChildInsertRemove">true</attribute>

      <!-- Valid modes are LOCAL (default)
                           REPL_ASYNC
                           REPL_SYNC
                           INVALIDATION_ASYNC
                           INVALIDATION_SYNC   -->
      <attribute name="CacheMode">LOCAL</attribute>

      <!-- Max number of milliseconds to wait for a lock acquisition -->
      <attribute name="LockAcquisitionTimeout">15000</attribute>


      <!-- Specific eviction policy configurations. This is LRU -->
      <attribute name="EvictionConfig">
         <config>
            <attribute name="wakeUpIntervalSeconds">5</attribute>
            <attribute name="policyClass">org.jboss.cache.eviction.LRUPolicy</attribute>

            <!-- Cache wide default -->
            <region name="/_default_">
               <attribute name="maxNodes">5000</attribute>
               <attribute name="timeToLiveSeconds">1000</attribute>
            </region>
         </config>
      </attribute>
   </mbean>
</server>
]]></programlisting>

         <para>
            在这本书的<link linkend="sample_xml_file">参考配置</link>部分，
            包含另一个更全面的样本 XML 文件，还有一个
            <link linkend="configuration_reference">查找手册表</link>来解释不同的选项。
         </para>

         <para>
            因为历史的原因，JBoss Cache 配置文件的格式遵循
            JBoss <glossterm linkend="as">AS</glossterm> 服务归档
            （Service Archive，SAR）部署描述符标准
            （还可以用于<link linkend="deployment.microkernel">JBoss AS 之中</link>）。
            因为这个双重用法，你可能看见有些配置文件的元素
            （例如
            <literal>depends</literal>
            或
            <literal>classpath</literal>
            ）在 JBoss AS 之外是不相关的，这些都可以安全地被忽略。
         </para>

         <para>
            下面代码将向你展示，如何通过查找并解析类路径上的配置文件，让
            <literal>CacheFactory</literal>
            构建和启动一个缓存：
         </para>

         <programlisting role="JAVA"><![CDATA[
   CacheFactory factory = new DefaultCacheFactory();
   Cache cache = factory.createCache("cache-configuration.xml");
         ]]></programlisting>

      </section>

      <section>
         <title>编程方法配置</title>
         <para>
            除了上面的基于 XML 配置方法，也可以通过编程的方式构建
            <literal>Configuration</literal>，
            就是用简单的改变对象属性的方法，这些方法是由
            <literal>Configuration</literal> 和它的组件提供的。
            当构建时，JBoss Cache 用缺省值预先设定 <literal>Configuration</literal>，
            可以用这些缺省设定作为快速起点。
         </para>

         <para>
            下面是一个编程配置的例子，
            构建了一个象上面 XML 例子一样的
            <literal>Configuration</literal>，并用它创建了一个
            <literal>Cache</literal> ：
         </para>

         <programlisting role="JAVA"><![CDATA[
   Configuration config = new Configuration();
   String tmlc = GenericTransactionManagerLookup.class.getName();
   config.setTransactionManagerLookupClass(tmlc);
   config.setIsolationLevel(IsolationLevel.READ_COMMITTED);
   config.setCacheMode(CacheMode.LOCAL);
   config.setLockParentForChildInsertRemove(true);
   config.setLockAcquisitionTimeout(15000);

   EvictionConfig ec = new EvictionConfig();
   ec.setWakeupIntervalSeconds(5);
   ec.setDefaultEvictionPolicyClass(LRUPolicy.class.getName());

   EvictionRegionConfig erc = new EvictionRegionConfig();
   erc.setRegionName("_default_");

   LRUConfiguration lru = new LRUConfiguration();
   lru.setMaxNodes(5000);
   lru.setTimeToLiveSeconds(1000);

   erc.setEvictionPolicyConfig(lru);

   List<EvictionRegionConfig> ercs = new ArrayList<EvictionRegionConfig>();
   ercs.add(erc);
   ec.setEvictionRegionConfigs(erc);

   config.setEvictionConfig(ec);

   CacheFactory factory = new DefaultCacheFactory();
   Cache cache = factory.createCache(config);
]]></programlisting>

         <para>
            即便是上面这个相当简单的配置，用编程的方法也很单调乏味。
            因此，首选的配置方式还是基于 XML 的方法。
            如果你的应用程序需要这种方法，完全可以用基于 XML 的方法配置大多数属性，
            然后访问 <literal>Configuration</literal> 对象用编程的方法修改少部分属性的缺省值，
            例如添加一个驱逐区域。
         </para>

         <para>
            注意：当一个缓存已经开始运行时，配置值就不可以通过编程修改了，
            但是那些注释为 <literal>@Dynamic</literal> 的除外。
            动态属性在 <link linkend="configuration_reference">参考配置</link>表中也标示出来了。
            如果要修改一个非动态属性将导致
            <literal>ConfigurationException</literal> 的异常。
         </para>
      </section>

      <section>
         <title>使用 <glossterm linkend="ioc">IOC</glossterm> 框架</title>

         <para>
            <literal>Configuration</literal> 类和它的
            <link linkend="configuration.elements">组件</link> 都是 Java Bean，
            他们通过简单的 getter 和 setter 方法暴露所有配置元素。
            因此，任意好的 IOC 框架都能够构从一个自己格式的 XML 文件构建一个
            <literal>Configuration</literal>。
            查看
            <link linkend="deployment.microcontainer">通过 JBoss 微容器部署</link>
            章节中的相关例子。
         </para>
      </section>
   </section>

   <section id="configuration.elements">
      <title>
         <literal>Configuration</literal>
         对象的组成
      </title>

      <para>
         一个
         <literal>Configuration</literal> 由几个子对象组成：

         <mediaobject>
            <imageobject>
               <imagedata fileref="Configuration.png"/>
            </imageobject>
         </mediaobject>
      </para>

      <para>
         下面是
         <literal>Configuration</literal> 组件的简短概述。
         查看 javadoc 和本书章节的连接，了解每个组件配置的更加完整解释。

         <itemizedlist>
            <listitem>
               <literal>Configuration</literal>
               : 层次结构的顶层对象，本书
               <link linkend="configuration_reference">参考配置</link>
               一章列出的配置属性都由它提供给你。
            </listitem>

            <listitem>
               <literal>BuddyReplicationConfig</literal>
               : 只有在使用
               <link linkend="br">伙伴复制</link>的情况下，这个配置才生效。
               它是伙伴复制的通用配置选项，必须包括一个：
            </listitem>

            <listitem>
               <literal>BuddyLocatorConfig</literal>
               : 服务于所用<literal>BuddyLocator</literal>实现，
               是一个与特定实现有关配置对象。
               依据 <literal>BuddyLocator</literal> 实现的需求，来决定暴露什么配置元素。
            </listitem>

            <listitem>
               <literal>EvictionConfig</literal>
               : 只有在使用
               <link linkend="eviction_policies">驱逐</link>的情况下，这个配置生效。
               它是驱逐配置的通用选项，必须包括至少一个：
            </listitem>

            <listitem>
               <literal>EvictionRegionConfig</literal>
               : 每个驱逐区域一个，为区域命名。必须包括一个：
            </listitem>

            <listitem>
               <literal>EvictionPolicyConfig</literal>
               : 服务于所用<literal>EvictionPolicy</literal>实现，
               是一个与特定实现有关配置对象。
               依据<literal>EvictionPolicy</literal>实现的需求，来决定暴露什么配置元素。
            </listitem>

            <listitem>
               <literal>CacheLoaderConfig</literal>
               : 只有在使用
               <link linkend="cache_loaders">缓存加载器</link>的情况下，这个配置生效。
               它是缓存加载器配置的通用选项，必须包括至少一个：
            </listitem>

            <listitem>
               <literal>IndividualCacheLoaderConfig</literal>
               : 服务于所用<literal>CacheLoader</literal>实现，
               是一个与特定实现有关配置对象。
               依据<literal>CacheLoader</literal>实现的需求，来决定暴露什么配置元素。
            </listitem>

            <listitem>
               <literal>RuntimeConfig</literal>
               : 向每个缓存客户端暴露有关缓存运行环境的某些信息
               （例如，如果使用<link linkend="br">伙伴缓存</link>，
               暴露伙伴缓存组的成员）。
               也允许直接注入缓存需要的外部服务，象一个
               <glossterm linkend="jta">JTA</glossterm> 的
               <literal>TransactionManager</literal> 或者
               一个 JGroups 的
               <literal>ChannelFactory</literal>。
            </listitem>
         </itemizedlist>
      </para>
   </section>

   <section>
      <title>动态重配置</title>
      <para>
         当缓存运行时，是支持动态修改
         <emphasis>某些</emphasis>配置选项的。
         例如，通过从正在运行的缓存得到
         <literal>Configuration</literal> 对象，然后通过编程修改相关值。
      </para>
      <programlisting role="JAVA"><![CDATA[
   Configuration liveConfig = cache.getConfiguration();
   liveConfig.setLockAcquisitionTimeout(2000);
         ]]></programlisting>
      <para>
         在
         <link linkend="configuration_reference">参考配置</link>章节中，
         有一个可动态修改选项的完整列表。
         如果你试图修改一个不能动态修改的选项，将会抛出一个
         <literal>org.jboss.cache.config.ConfigurationException</literal> 异常。
      </para>
   </section>

   <section id="configuration.options">
      <title>通过Option API 重新定义配置</title>
      <para>
         Option API 允许你在每次调用前，重新定义缓存的某些状态。
         这个步骤包括，创建一个
         <literal>org.jboss.cache.config.Option</literal> 实例，
         在
         <literal>Option</literal> 上设置你想重新定义的选项，
         然后在调用缓存方法前将它传递给
         <literal>InvocationContext</literal>。
      </para>
      <para>
         例如，用乐观锁重新定义缺省的节点版本控制：
      </para>
      <programlisting role="JAVA"><![CDATA[
   DataVersion v = new MyCustomDataVersion();
   cache.getInvocationContext().getOptionOverrides().setDataVersion(v);
   Node ch = cache.getRoot().addChild(Fqn.fromString("/a/b/c"));
]]></programlisting>

      <para>
         例如，在一个 REPL_SYNC 缓存中，禁止添加调用的复制：
      </para>
      <programlisting role="JAVA"><![CDATA[
   Node node = cache.getChild(Fqn.fromString("/a/b/c"));
   cache.getInvocationContext().getOptionOverrides().setLocalOnly(true);
   node.put("localCounter", new Integer(2));
         ]]></programlisting>
      <para>
         查看
         <literal>Option</literal> 类的 javadoc，了解有关可用选项的详细情况。
      </para>
   </section>
</chapter>
