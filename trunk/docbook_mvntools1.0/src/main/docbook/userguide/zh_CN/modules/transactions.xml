<chapter id="transactions">
   <title>事务和并发</title>
   <section>
      <title>并发访问</title>

      <para>JBoss Cache 是个线程安全的缓存接口，并且使用它自己控制并发的有效机制。
      为了实现高效的目的，缺省情况下它使用悲观锁方案。也可以选择乐观锁，这个在后面讨论。
      </para>

      <section>
         <title>锁</title>
         <para>加锁是在内部完成的，在节点的层次。例如，当我们想要访问“/a/b/c”时，
         将获得节点“a”，“b”和“c”的锁。当相同的事务想要访问“/a/b/c/d”时，
         既然我们已经获得了“a”，“b”和“c”的锁，我们只需要获得“d”的锁。
         </para>
         <para>锁的拥有者或者是事务（调用是在一个已经存在的事务范围内进行的）
         或者是线程（调用没有关联事务）。不管是那种情况，在内部都要将事务或线程转换成一个
            <literal>GlobalTransaction</literal> 实例，这个实例用做集群范围内修改的全局唯一标识。
            例如，当我们在集群内运行一个两阶段提交协议时，
            <literal>GlobalTransaction</literal> 在集群范围内唯一标识工作单元。
         </para>

         <para>锁可以是读锁或写锁。写锁串行化读和写访问，而只读锁仅串行化读访问。
         当得到一个写锁，就不能再得到写或读锁。当得到一个读锁，其他人能得到读锁。
         但是，为了得到写锁，必须等待所有的读锁全部释放掉。
         当预定并发时，写锁总是比读锁优先。注意，（如果打开）读锁可以升级为写锁。
         </para>

         <para>在下面的情景中，使用读-写锁会有帮助：假定有两个节点“/a/b/n1”和“/a/b/n2”的一棵树，
         在写锁的情况下，当 Tx1 访问“/a/b/n1”时，在 Tx1 完成并释放它的锁前 Tx2 不能访问“/a/b/n2”。
         但是，在读-写锁的情况下这是可能的，因为 Tx1 获得“/a/b”的读锁和“/a/b/n1”的读-写锁。
         那么，Tx2 也能够获得“/a/b”的读锁，加上“/a/b/n2”的读-写锁。这将允许更高的缓存并行访问。
         </para>
      </section>

      <section>
         <title>悲观锁</title>
         <para>缺省的情况下，JBoss Cache 使用悲观锁。加锁的操作并不直接暴露给用户。
         而是，通过配置事务隔离层次来提供不同的加锁操作。
         </para>
         <section>
            <title>隔离层次</title>
            <para>JBoss Cache 支持下列事务隔离层次，类似于数据库 <glossterm linkend="acid">ACID</glossterm> 隔离层次。
            用户可以配置实例范围的隔离层次，NONE, READ_UNCOMMITTED, READ_COMMITTED,
               REPEATABLE_READ 或 SERIALIZABLE。缺省情况下隔离层次使用 REPEATABLE_READ。
            </para>

            <orderedlist>
               <listitem>
                  <para>NONE。不需要事务支持。在这个层次没有加锁，例如，用户必须管理数据的完整性。
                  实现中不使用锁。
                  </para>
               </listitem>

               <listitem>
                  <para>READ_UNCOMMITTED。任意时间都可以读数据，而写操作是互相排斥的。
                  注意，这个层次不能防止所谓的“脏读
                  （<glossterm linkend="dirty-read">dirty read</glossterm>）”，
                  其中 Tx1 的数据修改在提交前可能被 Tx2 读取。
                  换句话说，如果你有下列次序，
                  </para>
                  <programlisting><![CDATA[
   Tx1     Tx2
    W
            R
]]></programlisting>
                  <para>
                     使用这个隔离层次将不能防止 Tx2 读操作。一般来说，实现中对写使用排斥锁，而读不需要获得锁。
                  </para>
               </listitem>

               <listitem>
                  <para>READ_COMMITTED。只要没有写，可以在任意时间读数据。
                  这个层次防止脏读。但是它不能防止所谓的“不可重复读
                  （<glossterm linkend="non-repeatable-read">non-repeatable read</glossterm>）”，
                  其中可能造成线程两次读取的结果不一致。例如，如果你有下列次序，
                  </para>
                  <programlisting><![CDATA[
   Tx1     Tx2
    R
            W
    R
]]></programlisting>

                  <para>其中，Tx1 线程里的第二次读将产生不同的结果。
                  </para>

                  <para>实现通常使用读-写锁；当只有读的时候，读操作成功获得锁，写操作只有等到没有读锁时才能获得锁。
                  读操作将阻塞等到没有写锁的时候才能获得锁。当完成时，读操作一般释放读锁，
                  这样后续读取相同数据必须重新获得一个读锁，这就导致不可重复读，其中两次读取相同数据可能会有不同的值。
                  注意，不管事务状态（它是否已经提交）如何，写操作只是申请锁。
                  </para>
               </listitem>

               <listitem>
                  <para>REPEATABLE_READ。只要没有写，数据就可以读，反之亦然。
                  这个层次防止“不可重复读”，但是它不能完全防止所谓的“幻像读
                  （<glossterm linkend="phantom-read">phantom read</glossterm>）”，
                  其中新数据从其他事务插入树。一般实现使用读-写锁，这是缺省使用的隔离层次。
                  </para>
               </listitem>

               <listitem>
                  <para>SERIALIZABLE。使用互斥锁同步数据访问。在任意给定时间上，
                  只有 1 个写操作或读操作能够得到锁。锁在事务的终点释放。
                  一般认为这个隔离层次在性能和线程/事务并发方面是非常差的。
                  </para>
               </listitem>
            </orderedlist>

         </section>

         <section>
            <title>插入和移除节点</title>

            <para>
               缺省情况下，向树里插入新的节点或从树里移除已经存在节点，
               JBoss Cache 将仅尝试获得新节点父节点的读锁。这个方法并没有将子节点视为父节点状态的完整部分。
               如果节点频繁增加或移除，这个方法允许更高的并发性，但却以准确性的降低为代价。
               当需要更高准确性的时候，JBoss Cache 提供了一个
               <literal>LockParentForChildInsertRemove</literal> 配置选项。
               如果将它设为 <literal>true</literal>，插入和移除子节点需要获得父节点的
               <emphasis>写锁</emphasis>。
            </para>
            <para>
               除了上面所说，在 2.1.0 和更高版本中，JBoss Cache 提供基于每个节点覆盖这个配置的能力。
               查看 <literal>Node.setLockForChildInsertRemove()</literal> 和它对应的 javadoc 了解细节。
            </para>
         </section>
      </section>

      <section>
         <title>乐观锁</title>
         <para>提供乐观锁的动机是为了提高并发。当很多线程大量竞争访问数据树时，
         象我们在悲观锁那样在整个事务期间，对部分树进行加锁（为了读和写）可能非常低效。
         通过使用一种叫做数据版本控制的技术，乐观锁允许线程和事务更高效率的并发。
         版本控制下面解释。注意，如果打开乐观锁，将忽略隔离层次（如果配置）。
         </para>
         <section>
            <title>架构</title>
            <para>乐观锁将所有的方法都视为事务型的
               <footnote>
                  <para>因为这个需求，当使用乐观锁时，你必须总是配置一个事务管理器。
                  </para>
               </footnote>。
               假设你没有在一个进行中事务调用方法，JBoss Cache 也创建一个
               <emphasis>隐含事务</emphasis>，当调用结束时，提交这个事务。
               每个事务维护一个事务工作空间，其中包含事务内使用数据的一个拷贝。
            </para>
            <para>例如，如果一个事务调用 <literal>cache.getRoot().getChild( Fqn.fromString("/a/b/c") )</literal>，
            节点 a, b 和 c 从主数据树拷贝进工作空间。数据加上版本，并且事务里所有调用都是在这个数据拷贝上工作而不是实际数据。
            当事务提交时，它的工作空间通过比较版本合并回底层树。
            如果有版本不匹配，例如实际数据树版本比工作空间的高，可能是因为其他事务访问了相同的数据，
            修改它并在第一个事务结束前提交了，当提交时，这个事务抛出一个
               <literal>RollbackException</literal>异常，并且提交失败。
            </para>
            <para>乐观锁使用我们上面提及的相同的锁，但是锁只保留非常短的时间，在事务的开始建立一个工作空间，
            以及当事务提交时向树合并数据。
            </para>
            <para>
               因此，如果版本检验失败，或者因为比悲观锁运行稍慢，乐观锁会偶尔失败。
               比悲观锁运行稍慢是因为不可避免的开销，以及维护工作空间、数据版本管理和提交验证的额外处理。
               乐观锁在维持一个高水平并发的同时，给你一个接近 SERIALIZABLE 水平的数据完整性。
            </para>
         </section>
         <section>
            <title>数据版本控制</title>
            <mediaobject>
               <imageobject>
                  <imagedata fileref="DataVersions.png" format="PNG"/>
               </imageobject>
            </mediaobject>
            <para>
               乐观锁使用 <literal>DataVersion</literal> 接口（以及一个内部缺省
               <literal>DefaultDataVersion</literal> 实现）来跟踪节点的版本。
               在某些情况下，缓存数据是外部数据源，例如数据库的内存数据表达，
               将 JBoss Cache 使用的版本与外部使用的版本协调一致是合理的。
               就这点而论，使用 <link linkend="configuration.options">options API</link>，
               使用基于每次调用的方法设定你期望的 <literal>DataVersion</literal> 是可行的，
               在将你的数据放入缓存前，允许你实现 <literal>DataVersion</literal> 接口保存获得的外部版本信息。
            </para>
         </section>
         <section>
            <title>配置</title>
            <para>
               通过使用 NodeLockingScheme XML 属性并将其设定为“OPTIMISTIC”打开乐观锁：
            </para>
            <programlisting role="XML"><![CDATA[
...
   <!--
   Node locking scheme:
   OPTIMISTIC
   PESSIMISTIC (default)
   -->
   <attribute name="NodeLockingScheme">OPTIMISTIC</attribute>
...
   ]]></programlisting>
            <para>
               一般来说，定义带有乐观锁的驱逐策略是个可取的方法，你将驱逐策略的
               <literal>minTimeToLiveSeconds</literal> 参数定义得比事务管理器的事务停止时间值稍大。
               在事务进行中
               <footnote>
                  <para>查看
                     <ulink url="http://jira.jboss.com/jira/browse/JBCACHE-1155">JBCACHE-1155</ulink>
                  </para>
               </footnote>
               ，这能保证缓存里的数据版本不被驱逐。
            </para>
         </section>
      </section>
   </section>


   <section>
      <title>事务支持</title>

      <para>通过配置，JBoss Cache 可以使用并参与 <glossterm linkend="jta">JTA</glossterm> 兼容的事务。
      做为选择，如果关闭事务支持，等同于设定为 AutoCommit，其中每次改变（如果打开复制）后，修改都隐含
         <footnote>
            <para>依赖于是否使用基于内部的异步复制。</para>
         </footnote>
         复制。
      </para>

      <para>每次调用进来，JBoss Cache 所做的是：</para>
      <orderedlist>
         <listitem>
            <para>返回当前线程关联的 <literal>javax.transaction.Transaction</literal>。
            </para>
         </listitem>
         <listitem>
            <para>如果还没有，注册一个 <literal>javax.transaction.Synchronization</literal>，
            当事务提交或回滚通知事务管理器。
            </para>
         </listitem>
      </orderedlist>
      <para>
         为了这么做，必须提供一个环境的
         <literal>javax.transaction.TransactionManager</literal> 引用给缓存。
         通常，通过配置缓存的 <literal>TransactionManagerLookup</literal> 接口实现类名来完成。
         当缓存启动时，它将创建这个类的一个实例，并调用它的 <literal>getTransactionManager()</literal> 方法，
         这个方法返回一个 <literal>TransactionManager</literal> 引用。
      </para>

      <mediaobject>
         <imageobject>
            <imagedata fileref="TransactionLookup.png" format="PNG"/>
         </imageobject>
      </mediaobject>

      <para>JBoss Cache 带有 <literal>JBossTransactionManagerLookup</literal> 和
         <literal>GenericTransactionManagerLookup</literal>。
         <literal>JBossTransactionManagerLookup</literal> 能够绑定到一个运行的 JBoss AS 实例，
         并返回一个 <literal>TransactionManager</literal>，
         而 <literal>GenericTransactionManagerLookup</literal> 能绑定到很多流行的 Java EE 应用服务器，
         并提供相同的功能。也提供一个伪实现 <literal>DummyTransactionManagerLookup</literal>，
         主要用于单元测试。因为是伪实现，它仅用于演示和测试目的，不推荐在产品中使用。
      </para>

      <para>
         配置 <literal>TransactionManagerLookup</literal> 的另一个方法是，编程注入一个
         <literal>TransactionManager</literal> 引用到
         <literal>Configuration</literal> 对象的
         <literal>RuntimeConfig</literal> 元素：
      </para>

      <programlisting role="JAVA"><![CDATA[
   TransactionManager tm = getTransactionManager(); // magic method
   cache.getConfiguration().getRuntimeConfig().setTransactionManager(tm);
      ]]></programlisting>

      <para>
         当 <literal>Configuration</literal> 是通过某种 <glossterm linkend="ioc">IOC</glossterm> 容器构建的，
         并且已经有了一个对事务管理器的引用，
         注入 <literal>TransactionManager</literal> 是推荐的方法。
      </para>

      <para>当事务提交时，我们启动一个一阶段或二阶段提交协议。
      查看<link linkend="replication.tx">复制缓存和事务</link>，了解细节。
      </para>

   </section>
</chapter>
