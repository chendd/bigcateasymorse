<?xml version="1.0" encoding="UTF-8"?>
<chapter id="clustering">
   <title>集群</title>

   <para>这章将围绕 JBoss Cache 集群有关问题展开讨论。</para>

   <section>
      <title>缓存复制模式</title>

      <para>JBoss Cache 可以配置成本地（独立）或集群。
      如果在一个集群中，可以将缓存配置成复制修改，或无效修改。下面有详细的讨论。
      </para>

      <section>
         <title>本地模式</title>

         <para>本地缓存不参与集群，并且也不与集群中其他缓存通信。
         因此，它的元素不需要串行化，但是我们推荐使它们可串行化，
         这样能使用户在任意时间修改缓存模式。
         对 JGroups 库的依赖还是存在的，尽管不再启动 JGroups 通道。
         </para>
      </section>

      <section>
         <title>复制的缓存</title>

         <para>复制的缓存将修改复制到集群中的一些或所有其他缓存实例。
         复制可能发生在每次修改之后（没有事务），或者发生在事务的结束（提交时间）。
         </para>

         <para>复制可以是同步的或异步的。
         使用那种选项，要依赖于应用需求。
         同步复制将阻塞调用者（例如，对于 <literal>put()</literal>），
         直到修改已经被成功复制到集群的所有节点。
         异步复制在后台完成复制（<literal>put()</literal> 直接返回）。
         JBoss Cache 也提供一个复制队列，其中修改被周期性地复制（例如基于间隔时间），
         或当队列尺寸超过一定的元素数量，或者二种方案的组合。
         </para>

         <para>异步复制更快一些（没有调用阻塞），
         因为同步复制需要从集群所有节点确认他们已经成功收到并应用了修改（往返时间）。
         但是，当同步复制成功返回时，调用者知道所有修改已经正确应用到所有缓存实例，
         异步复制却无法做到这点。对于异步复制，仅仅将错误写到日志中。
         即便是使用事务，事务可能成功，而在所有缓存实例中的复制可能失败。
         </para>

         <section id="replication.tx">
            <title>复制的缓存和事务</title>

            <para>当使用事务时，复制操作仅发生在事务的边界，例如事务提交。
            既然只广播单一修改而不是一系列独立的修改，这会减少复制的流量，
            相比不使用事务，这会大大提高效率。这方面的另一个影响是，
            如果事务回滚，就不会产生贯穿集群的广播。
            </para>

            <para>视运行集群的异步模式或同步模式而定，JBoss Cache 会分别使用单一阶段或
               <ulink
                     url="http://en.wikipedia.org/wiki/Two-phase_commit_protocol">两阶段提交
               </ulink> 协议。
            </para>

            <section>
               <title>单一阶段提交</title>

               <para>当你使用的缓存模式是 REPL_ASYNC 时，所有的修改复制在单一调用中完成，
               这将指示远程缓存将这些修改应用到它们本地内存状态并在本地提交。
               既然通信是异步的，远程错误/回滚不会反馈给事务的源头。
               </para>
            </section>

            <section>
               <title>两阶段提交</title>

               <para>当你使用的缓存模式是 REPL_SYNC，在提交你的事务时，
               JBoss Cache 会广播一个预备调用，这个调用会带有有关这个事务所有修改。
               然后，远程缓存获得他们内存状态的本地锁，并应用修改。
               一旦所有的远程缓存应答了这个预备调用，事务的源头广播一个提交。
               这将指示所有的远程缓存提交他们的数据。如果任意一个缓存没有成功应答预备阶段，
               源头广播一个回滚。
               </para>

               <para>注意，虽然预备阶段是同步的，提交和回滚阶段是异步的。
               这是因为
                  <ulink
                        url="http://java.sun.com/products/jta/">Sun 的 JTA 规范
                  </ulink>
                  没有规定事务资源怎么处理这个事务阶段的失败，
                  而且其他参与事务的资源可能有其他不确定状态。
                  就这点来看，我们去掉了事务这个阶段的同步通信开销。
                  那就是说，他们可以通过使用 <literal>SyncCommitPhase</literal>
                  和 <literal>SyncRollbackPhase</literal> 配置属性来强制同步。
               </para>
            </section>
         </section>

         <section id="br">
            <title>伙伴复制</title>

            <para>伙伴复制允许你禁止向集群里所有实例复制你的数据，
            而是每个实例在集群里选择一个或多个“伙伴”，并且只向这些指定的伙伴复制。
            这极大地有助于可伸缩性，因为每次向集群添加另外一个实例不再影响内存和网络流量。
            </para>

            <para>伙伴复制最常使用方式之一是，
            Servlet 容器用一个复制缓存来存储 HTTP Session 数据。
            伙伴复制良好工作并获得真正益处的必要条件之一是，
            使用 <emphasis>会话亲缘性（<glossterm linkend="session_affinity">session affinity</glossterm>）</emphasis>，
            更通用的一个说法是 HTTP Session 复制对话中的
            <emphasis>粘性对话（sticky sessions）</emphasis>。
            这个术语的意思是，当某些数据频繁访问时，最佳的方式是总是访问一个实例，
            而不是循环的方式，因为这将有助于缓存集群优化伙伴的选择，它在伙伴中存储数据，
            并最小化复制流量。
            </para>

            <para>如果做不到这点，有可能证明伙伴复制是一个负担而不是益处。
            </para>

            <section>
               <title>选择伙伴</title>

               <figure>
                  <title>BuddyLocator</title>

                  <mediaobject>
                     <imageobject>
                        <imagedata fileref="BuddyReplication.png"/>
                     </imageobject>
                  </mediaobject>
               </figure>

               <para>伙伴复制使用一个 <literal>BuddyLocator</literal> 实例，
               它包含用于在网络上选择伙伴的逻辑。
               当前，JBoss Cache 带有单一实现 <literal>NextMemberBuddyLocator</literal>，
               缺省的情况下，如果没有提供其他实现将使用这个。
               <literal>NextMemberBuddyLocator</literal> 在集群中选择下一个成员，
               就像名字所暗示的一样，保证事件在每个实例的伙伴间传递。
               </para>

               <para><literal>NextMemberBuddyLocator</literal> 接受两个可选参数。
                  <itemizedlist>
                     <listitem>
                        <literal>numBuddies</literal>
                        - 说明每个实例应该选择多少伙伴来备份它的数据，缺省是1。
                     </listitem>

                     <listitem>
                        <literal>ignoreColocatedBuddies</literal>
                        - 意味着每个实例将<emphasis>试着</emphasis>在不同的物理主机上选择伙伴。
                        如果做不到这一点，它将回来在同一主机查找，
                        缺省是<literal>true</literal>。
                     </listitem>
                  </itemizedlist>
               </para>
            </section>

            <section>
               <title>伙伴池</title>

               <para>也叫做<emphasis>复制组</emphasis>，
               一个伙伴池是一个可选的结构，其中集群里的每个实例可以配置一个伙伴池名字。
               可以将这个想象成一个“特殊俱乐部会员资格”，其中当选择伙伴时，
               支持伙伴池的<literal>BuddyLocator</literal>将试图选择拥有相同伙伴池名称的伙伴。
               这允许系统管理员一定程度的弹性，控制可选伙伴的范围。
               例如，系统管理员可以将两个独立物理机架上的两个独立物理服务器上的两个实例放到同一个伙伴池中。
               因此，不是选择同一机架上的不同主机上的实例，
               <literal>BuddyLocator</literal> 将选择不同机架上的同一伙伴池内的实例，
               这将增加一定程度的冗余。
               </para>
            </section>

            <section>
               <title>故障转移</title>

               <para>在一个实例崩溃的灾难事件中，假定客户连接到了缓存
               （直接或间接，经过一些其他服务，例如 HTTP session 复制），
               能够将请求重定向到集群中的其他任意缓存实例。
               这就是 Data Gravitation 概念的出处。
               </para>

               <para>Data Gravitation 是一个概念，如果请求集群上的某个实例而这个实例又没有包含所要信息，
               它将对集群中的其他实例要求这些数据。换句话说，数据是迟转移的，
               <emphasis>仅仅</emphasis>在其他节点要求时迁移。
               这个策略防止网络风暴效应，
               预防仅仅因一个（或一些）节点死掉而导致大量数据拥挤在健康节点间。
               </para>

               <para>如果在一些节点的主要部分没有找到数据，
               它将（可选地）要求其他实例检查他们为其他缓存存储的备份数据。
               这意味着，即便包含你 Session 的缓存死掉，
               其他实例将仍能让集群查找这个数据的备份来访问这个数据。
               </para>

               <para>一旦定位了，这个数据将传回访问的实例，添加到这个实例的数据树。
               然后，这个数据（可选地）从所有其他节点移除（并备份），以便于如果使用了会话亲缘性，
               现在将亲和这个新的缓存实例，这个实例刚刚已经<emphasis>拥有</emphasis>这个数据。
               </para>

               <para>Data Gravitation 实现为一个拦截器。
               下面（所有可选）配置属性是关于 Data Gravitation 的。
                  <itemizedlist>
                     <listitem>
                        <literal>dataGravitationRemoveOnFind</literal>
                        - 强迫所有拥有数据或拥有数据备份的远程缓存移除数据，
                        因此使请求缓存成为新的数据拥有者。
                        当然，这个移除仅发生在新拥有者完成向伙伴复制数据之后。
                        如果设置为 <literal>false</literal>，将广播驱逐而不是移除，
                        因此任何存储在缓存加载器的状态还是保留下来了。
                        如果你有一个共享的缓存加载器配置，这会很有用。缺省是<literal>true</literal>。
                     </listitem>

                     <listitem>
                        <literal>dataGravitationSearchBackupTrees</literal>
                        - 要求远程实例在搜索主数据结构的同时搜索他们的备份。
                        缺省是 <literal>true</literal>。影响的结果是，
                        如果是 <literal>true</literal>，则除了数据拥有者外，备份节点也反应 Data Gravitation 的请求。
                     </listitem>

                     <listitem>
                        <literal>autoDataGravitation</literal>
                        - 如果每个缓存都错过，Data Gravitation 是否发生。
                        缺省是 <literal>false</literal>，防止不必要的网络调用。
                        大多数情况下，当可能需要移动数据时，
                        可以传递一个<literal>Option</literal>来为每次调用打开 Data Gravitation。
                        如果 <literal>autoDataGravitation</literal> 是 <literal>true</literal>，
                        这个 <literal>Option</literal> 不是必须的。
                     </listitem>
                  </itemizedlist>
               </para>
            </section>

            <section>
               <title>配置</title>

               <programlisting role="XML"><![CDATA[
<!-- Buddy Replication config -->
<attribute name="BuddyReplicationConfig">
   <config>

      <!-- Enables buddy replication. This is the ONLY mandatory configuration element here. -->
      <buddyReplicationEnabled>true</buddyReplicationEnabled>

      <!-- These are the default values anyway -->
      <buddyLocatorClass>org.jboss.cache.buddyreplication.NextMemberBuddyLocator</buddyLocatorClass>

      <!--  numBuddies is the number of backup nodes each node maintains. ignoreColocatedBuddies means
            that each node will *try* to select a buddy on a different physical host. If not able to do so though,
            it will fall back to colocated nodes. -->
      <buddyLocatorProperties>
         numBuddies = 1
         ignoreColocatedBuddies = true
      </buddyLocatorProperties>

      <!-- A way to specify a preferred replication group. If specified, we try and pick a buddy which shares
           the same pool name (falling back to other buddies if not available). This allows the sysdmin to
           hint at backup buddies are picked, so for example, nodes may be hinted topick buddies on a different
           physical rack or power supply for added fault tolerance. -->
      <buddyPoolName>myBuddyPoolReplicationGroup</buddyPoolName>

      <!-- Communication timeout for inter-buddy group organisation messages (such as assigning to and
           removing from groups, defaults to 1000. -->
      <buddyCommunicationTimeout>2000</buddyCommunicationTimeout>

      <!-- Whether data is removed from old owners when gravitated to a new owner. Defaults to true. -->
      <dataGravitationRemoveOnFind>true</dataGravitationRemoveOnFind>

      <!-- Whether backup nodes can respond to data gravitation requests, or only the data owner is
           supposed to respond.  Defaults to true. -->
      <dataGravitationSearchBackupTrees>true</dataGravitationSearchBackupTrees>

      <!-- Whether all cache misses result in a data gravitation request. Defaults to false, requiring
           callers to enable data gravitation on a per-invocation basis using the Options API. -->
      <autoDataGravitation>false</autoDataGravitation>

   </config>
</attribute>

]]></programlisting>
            </section>
         </section>
      </section>
   </section>

   <section>
      <title>失效</title>

      <para>如果缓存配置成失效而不是复制，每次缓存里的数据修改，
      集群里其他缓存收到信息，通知他们的数据现在陈旧了需要从内存中驱逐。
      当在共享缓存加载器（查看有关缓存加载器的章节）的环境下使用失效时，
      远程缓存将使用共享的缓存加载器来取回已经修改的数据。
      这么做的好处是双重的：网络流量是极小的，因为失效信息相比复制更新数据来说是非常小的；
      同时，集群中的其他缓存可用一种延迟模式查询修改过的数据，也就是在需要时才查询。
      </para>

      <para>失效信息在每次修改后发送（无事务的情况下），或者在事务结束成功提交时发送。
      这通常更加高效，因为通过事务可以将失效信息优化成一个整体，而不是基于每次修改都发送失效信息。
      </para>

      <para>失效也可以是同步或异步的，就同复制的情景一样。
      同步失效要阻塞直到所有集群里的缓存接到失效信息并驱逐陈旧数据为止；
      而异步失效则用一种“发送并忘记”的模式工作，其失效信息广播出去但不阻塞等待反馈。
      </para>
   </section>

   <section>
      <title>状态传递</title>

      <para>
         <emphasis>状态传递</emphasis>是指这样的过程，
         JBoss Cache 通过从其他缓存实例获得当前状态并将这个状态整合进它自己状态，
         来完成自我准备并开始提供服务的过程。
      </para>

      <section>
         <title>状态传递类型</title>

         <para>从状态传递的视角，状态传递区分成三种类型。
         首先，在特定状态传递实现的环境下，由于底层产品的不同，有两种截然不同的状态传递类型：
         字节数组和基于流的状态传递。其次，依据被传递的子树，状态传递可以是全部或部分状态传递。
         全部传递表示全部缓存树的传递，而部分状态传递表示某部分子树的传递。
         最后，基于缓存的特定用法，状态传递可以是“内存”和“持久”传递。
         </para>
      </section>

      <section>
         <title>字节数组和基于流的状态传递</title>

         <para>在 2.0 以前的所有缓存版本中，基于字节数组的传递是缺省的、唯一的传递方法。
         基于字节数组的传递将整个传递状态加载成一个字节数组，并将它发送给状态接收成员。
         这种方法的主要限制是，当传递状态很大时候（例如 1GB），
         会导致 OutOfMemoryException 异常。基于流的状态传递为读状态一方提供一个 InputStream，
         为写的一方提供一个 OutputStream。
         抽象的 OutputStream 和 InputStream 使状态传递以字节块的形式完成，所以对内存的需求很小。
         例如，如果应用状态表达成一棵树，总的尺寸是 1GB，不用提供 1GB 的字节数组来基于流做状态传递，
         可以用 N 字节的块来传递状态，而用户可以自己配置 N 的大小。
         </para>

         <para>字节数组和基于流的状态传递完全是 API 透明的、可互换的，
         并通过标准的缓存配置 XML 文件静态配置。
         参考有关 JGroups 文档，了解如何从一种传递方式变到另外一种。
         </para>
      </section>

      <section>
         <title>全部和部分状态传递</title>

         <para>如果打开内存或持久状态传递，在不同时间段，依据如何使用缓存，
         发生全部或部分状态传递。“全”状态传递是指，有关整个树的状态传递，
         例如根节点及其下面的所有节点。“部分”状态传递是指，仅树的一部分发生传递，
         例如一个给定 <glossterm linkend="fqn">Fqn</glossterm> 的节点及其下面的所有节点。
         </para>

         <para>如果打开内存或持久状态传递，状态传递发生在下面时间段：
         </para>

         <orderedlist>
            <listitem>
               <para>初始状态传递。这发生在缓存最初启动
               （作为 <literal>start()</literal> 方法过程的一部分）。
               这是一个全状态传递。状态从运行最久的缓存实例取得
                  <footnote>
                     <para>在 JGroups 术语中，运行最久的缓存实例总是协调程序。</para>
                  </footnote>。
              如果有任何接收或整合状态问题，缓存不会启动。
               </para>

               <para>初始状态传递将发生，除非：</para>

               <orderedlist>
                  <listitem>
                     <para>缓存的 <literal>InactiveOnStartup</literal> 属性设置为
                        <literal>true</literal>。这个属性与基于区域编码联合使用。
                     </para>
                  </listitem>

                  <listitem>
                     <para>使用伙伴复制。查看下面有关伙伴复制条件下，状态传递的更详细内容。
                     </para>
                  </listitem>
               </orderedlist>
            </listitem>

            <listitem>
               <para>部分状态传递在区域激活之后。当使用基于区域的编码时，
               应用需要在缓存内注册一个特定类加载器。
               这个类加载器在解码缓存某一特定区域（子树）状态时使用。
               </para>

               <para>注册后，应用调用
                  <literal>cache.getRegion(fqn, true).activate()</literal>，
                  这将为初始化一个相关子树状态的部分状态传递。
                  这个请求首先向集群里最久的缓存实例发出。
                  但是，如果这个实例的应答中没有状态，它将轮询每个实例请求状态，
                  直到某个实例提供了状态或所有实例都已经查询过。
               </para>

               <para>一般来说，当使用基于区域的编码时，缓存的
                  <literal>InactiveOnStartup</literal> 属性设置为
                  <literal>true</literal>。
                  因为没有能力反串行化传递的状态而失败，这将禁止初始状态传递。
               </para>
            </listitem>

            <listitem>
               <para>伙伴复制。当使用伙伴复制时，初始状态传递将关闭。
               反过来说，当缓存实例参加集群时，它成为一个或多个其他实例的伙伴，
               而一个或多个其他实例成为它的伙伴。
               每次一个实例判断有一个新伙伴为它提供备份，它将当前状态推给这个新伙伴。
               这个将状态的“推”给新伙伴与其他形式的状态传递有少许不同，
               它是基于“推”的方法（例如，接收者要求和接收状态）。
               但是，准备的过程和整合状态是一样的。
               </para>

               <para>基于伙伴分组信息，状态的“推”操作只有在
                  <literal>InactiveOnStartup</literal> 属性设置为
                  <literal>false</literal> 的情况下发生。
                  如果是 <literal>true</literal>，伙伴间状态传递仅发生在
                  应用激活分组不同成员的区域的时候。
               </para>

               <para>区域激活调用之后的部分状态传递也与伙伴伙伴复制的情况有少许不同。
               不是向某一缓存实例要求部分状态，而是尝试所有实例直到某一实例应答，
               在伙伴复制的情况下，激活区域的实例从每个作为备份的实例请求部分状态。
               </para>
            </listitem>
         </orderedlist>
      </section>

      <section>
         <title>暂时（“内存”）和持久状态传递</title>

         <para>获得和整合的状态可以包括两种基本类型：
         </para>

         <orderedlist>
            <listitem>
               <para>“暂时”或“内存”状态。这由另一个缓存实例的实际内存状态组成，
               状态由缓存不同内存节点上的内容来提供，它们被串行化并传递；
               接收方反串行化数据，在它自己内存树上建立对应的节点，
               用传递过来的数据组装这些节点。
               </para>

               <para>通过将缓存的
                  <literal>FetchInMemoryState</literal> 配置属性设置为
                  <literal>true</literal> 来打开“内存”状态传递。
               </para>
            </listitem>

            <listitem>
               <para>“持久”状态。只有使用非共享缓存加载器的情况下才应用。
               存储在状态提供者缓存持久存储中的状态被反串行化，并传递；
               接收方将数据传递给自己缓存加载器，这个缓存加载器将数据持久化到接受方的持久存储中。
               </para>

               <para>通过将缓存加载器的
                  <literal>fetchPersistentState</literal> 属性设定为
                  <literal>true</literal> 来打开“持久”状态传递。
                  如果多个缓存加载器配置成一个链，则只有一个能将这个属性设置为 true。
                  否则在启动的时候将得到异常。
               </para>

               <para>共享一个缓存加载器的持久状态传递没有意义，
               因为是相同持久存储提供数据，所以仅仅接受数据就可以了。
               因此如果使用了共享的缓存加载器，即便是缓存加载器的
                  <literal>fetchPersistentState</literal> 属性设置为
                  <literal>true</literal>，缓存也不会允许持久状态传递。
               </para>
            </listitem>
         </orderedlist>

         <para>具体那种状态传递更合适，将有赖于缓存的用法。
         </para>

         <orderedlist>
            <listitem>
               <para>如果使用的是一个写通（<glossterm linkend="write_through">Write-through</glossterm>）缓存加载器，
               持久状态完全代表缓存状态。数据可能从内存状态中被驱逐，
               但是它还是在持久存储中。在这种情况下，如果缓存加载器没有共享，
               用持久状态传递来保证新缓存有正确的状态。
               如果请求的是一个“热”缓存（当缓存开始提供服务时，所有相关数据都在内存中），
               内存状态也被可以传递。
               （注意：也可以用<literal>CacheLoaderConfig</literal> 配置参数里的
                  <literal><![CDATA[<cacheloader><preload>]]></literal>
                  元素来提供“暖”或“热”缓存，而不需要一个内存状态传递。
                  这个方法从某种程度上减轻了缓存实例提供状态的负担，
                  但是这增加了接收方的持久存储负担。）
               </para>
            </listitem>

            <listitem>
               <para>如果缓存加载器带有钝化，状态的完整表达只能通过合并内存（例如没有钝化的）
               和持久（例如已经钝化的）状态才能得到。
               因此，需要一个内存状态传递。如果缓存加载器没有共享，
               则需要一个持久状态传递。
               </para>
            </listitem>

            <listitem>
               <para>如果没有使用缓存加载器，并且缓存是一个独立的单边写缓存
               （例如，那些用于缓存数据，同时也可以在持久存储里找到，举例来说，数据库），
               内存状态是否传递依赖于请求的是否是一个“热”缓存。
               </para>
            </listitem>
         </orderedlist>
      </section>
      <section>
         <title>配置状态传递</title>
         <para>为了保证状态传递按希望的来进行，很重要的一点是为所有集群节点配置相同的持久和暂时状态。
         这是因为，当请求时，基于字节数组的传递仅依赖于请求者的配置，
         而基于流的传递依赖于请求方和发送方的配置，而且希望一致。
         </para>
      </section>
   </section>
</chapter>
