<chapter id="eviction_policies">
   <title>驱逐策略</title>

   <para>
      驱逐策略通过管理有多少节点允许存储在内存中，以及他们的生命范围来控制着 JBoss Cache 的内存管理。
      服务器上的内存限制决定了它不可能无限增长，因此需要有策略限制缓存的大小。
      驱逐策略绝大多数情况下与<link linkend="cache_loaders">缓存加载器</link>一同使用。
   </para>

   <section>
      <title>驱逐策略的配置</title>
      <section>
         <title>基本配置</title>
         <para>
            基本的驱逐策略配置元素如下：
         </para>
         <programlisting role="XML"><![CDATA[
   ...

   <attribute name="EvictionConfig">
      <config>
         <attribute name="wakeUpIntervalSeconds">3</attribute>

         <!-- This defaults to 200000 if not specified -->
         <attribute name="eventQueueSize">100000</attribute>

         <!-- Name of the DEFAULT eviction policy class. -->
         <attribute name="policyClass">org.jboss.cache.eviction.LRUPolicy</attribute>

         <!-- Cache wide default -->
         <region name="/_default_">
            <attribute name="maxNodes">100</attribute>
         </region>

         <!-- override policy used for this region -->
         <region name="/org/jboss/data" policyClass="org.jboss.cache.eviction.LRUPolicy">
            <attribute name="maxNodes">250</attribute>
            <attribute name="minTimeToLiveSeconds">10</attribute>
         </region>

         <!-- We expect a lot of events for this region, 
              so override the default event queue size -->
         <region name="/org/jboss/test/data" eventQueueSize="500000">
            <attribute name="maxNodes">60000</attribute>
         </region>

      </config>
   </attribute>

   ...
]]></programlisting>
         <para>
            <itemizedlist>
               <listitem>
                  <literal>wakeUpIntervalSeconds</literal>
                  - 这个必选的参数定义驱逐线程多少时间运行一次。
               </listitem>
               <listitem>
                  <literal>eventQueueSize</literal>
                  - 这个可选属性定义包含驱逐事件的队列的尺寸。
                  如果你的驱逐线程常常不运行，你可能需要提高这个尺寸。
                  基于每个区域的配置可以覆盖这个参数。
               </listitem>
               <listitem>
                  <literal>policyClass</literal>
                  - 这个参数是必须的，除非你为每个区域设定单独的 policyClass 属性。
                  如果在区域里没有定义，这个参数定义使用的缺省驱逐策略。
               </listitem>
            </itemizedlist>

         </para>
      </section>
      <section>
         <title>驱逐区域</title>
         <para>
            当讨论编码时，区域的概念和 <literal>Region</literal> 类
            <link linkend="architecture.regions">早已浏览过</link>。
            区域也有另外一个用途，就是用于在区域里定义驱逐策略。
            除了用于定义特定区域配置外，你也可以为节点配置一个缺省的、缓存范围的驱逐策略。
            这个驱逐策略不属于预定义的区域，或者你不想定义特定的区域。
            值得关注的一点是，当使用配置 XML 文件定义区域时，
            <literal>Fqn</literal> 的所有定义区域元素都是
            <literal>java.lang.String</literal> 对象。
         </para>
         <para>
            看看上面的驱逐配置片段，我们看到一个缺省的区域，<literal>_default_</literal>，
            包含了应用于不属于任何其他定义区域的节点属性。
         </para>
         <para>
            对于每个区域，你可以定义参数，这些参数将影响应用到区域上的策略如何选择驱逐节点。
            在上面的例子中，<literal>LRUPolicy</literal> 允许一个 <literal>maxNodes</literal> 参数来定义：
            它选择开始驱逐节点前，区域里可以存在多少节点。
            查看 javadoc，了解每个策略允许的参数列表。
            它也定义一个 <literal>minTimeToLiveSeconds</literal> 参数：
            考虑驱逐节点前，节点必须在内存里存在的最少时间。
         </para>

         <section>
            <title>互相重叠的驱逐区域</title>

            <para>定义相互重叠的区域是可能的。换句话说，一个区域可以定义成 <emphasis>/a/b/c</emphasis>，
            而另一个可以定义成 <emphasis>/a/b/c/d</emphasis>
            （它就是 <emphasis>/a/b/c</emphasis> 子树的 <emphasis>d</emphasis> 子树）。
            为了一致地处理这种情形，算法总选择它遇见的第一个区域。
            在这种模式下，如果算法需要决定如何处理 <emphasis>/a/b/c/d/e</emphasis>，
            它将从那开始沿着树向上走，直到它遇到第一个定义区域，在这个例子中是 <emphasis>/a/b/c/d</emphasis>。
            </para>
         </section>

      </section>
      <section>
         <title>驻留节点</title>
         <para>
            标示为驻留的节点（用 <literal>Node.setResident()</literal> 接口）在两种情形下都将被驱逐策略忽略，
            这两种情形是：当检查是否触发驱逐；当实际驱逐节点的过程中。
            例如，如果区域配置成最多有 10 个节点，在决定是否驱逐这个区域里的节点时，驻留节点不计算在内。
            另外，当区域的驱逐临界点到达时，也不考虑驱逐驻留节点。
         </para>
         <para>
            为了将一个节点标示驻留，应该使用 <literal>Node.setResident()</literal> 接口。
            缺省情况下，新建立的节点都不是驻留的。
            节点的 <literal>resident</literal> 属性是不复制、不持久化或不知道事务的。
         </para>
         <para>
            驻留节点的样本用法是，保证“路径”节点不给驱逐策略添加“干扰”。例如：
         </para>
         <programlisting role="JAVA"><![CDATA[
...
   Map lotsOfData = generateData();
   cache.put("/a/b/c", lotsOfData);
   cache.getRoot().getChild("/a").setResident(true);
   cache.getRoot().getChild("/a/b").setResident(true);
...
               ]]></programlisting>
         <para>
            在这个例子中，节点 <literal>/a</literal> 和 <literal>/a/b</literal> 都是路径节点，
            它们存在仅仅为了支持节点 <literal>/a/b/c</literal>，而且自己不包含任何数据。
            像这样，它们是标示为驻留节点的好候选者。这将导致更好的内存管理，
            因为当访问 <literal>/a</literal> 和 <literal>/a/b</literal> 时，不会产生驱逐事件。
         </para>
         <para>
            注意：当添加属性到驻留节点时，例如上一个例子中 <literal>cache.put("/a", "k", "v")</literal>，
            最好将这些节点再次变成非驻留节点，并考虑驱逐他们。
         </para>
      </section>

      <section>
         <title>编程配置</title>
         <para>
            使用 <literal>Configuration</literal> 对象配置驱逐，
            必须使用 <literal>org.jboss.cache.config.EvictionConfig</literal> 对象，
            它将传入 <literal>Configuration.setEvictionConfig()</literal>。
            查看<link linkend="configuration">有关配置的章节</link>，
            了解更多编程构建 <literal>Configuration</literal> 的信息。
         </para>

         <para>
            使用简单的<glossterm linkend="pojo">POJO</glossterm> 类来表达所有的缓存配置元素，
            也使在启动缓存后编程添加驱逐区域相当简单。例如，假定我们已经有了一个通过 XML 配置的缓存，
            并且 EvictionConfig 元素象上面显示那样。现在，在运行时，
            我们希望添加一个新的名叫“/org/jboss/fifo”的驱逐区域，使用 <literal>LRUPolicy</literal>，
            但是 <literal>maxNodes</literal> 数字不同：
         </para>

         <programlisting role="JAVA"><![CDATA[
   Fqn fqn = Fqn.fromString("/org/jboss/fifo");

   // Create a configuration for an LRUPolicy
   LRUConfiguration lruc = new LRUConfiguration();
   lruc.setMaxNodes(10000);

   // Create the region and set the config
   Region region = cache.getRegion(fqn, true);
   region.setEvictionPolicy(lruc);
         ]]></programlisting>
      </section>
   </section>

   <section>
      <title>带有的驱逐策略</title>
      <section>
         <title>LRUPolicy - 近期最少使用</title>

         <para>
            <literal>org.jboss.cache.eviction.LRUPolicy</literal>
            控制节点生命周期和年龄两个方面。这个策略保证一个恒定顺序（<literal>O (1)</literal>）
            添加、移除和查找（访问）。它有下列配置参数：
         </para>

         <itemizedlist>
            <listitem>
               <literal>maxNodes</literal>
               - 在这个区域里，允许的最大节点数。0 表示没有限制。
            </listitem>
            <listitem>
               <literal>timeToLiveSeconds</literal>
               - 节点被清除掉以前，节点没有写入或读出的时间量（用秒计）。0 表示没有限制。
            </listitem>

            <listitem>
               <literal>maxAgeSeconds</literal>
               - 节点被清除掉以前，不考虑空闲时间节点的寿命（用秒计）。0 表示没有限制。
            </listitem>

            <listitem>
               <literal>minTimeToLiveSeconds</literal>
               - 访问节点后考虑驱逐前，节点必须允许存活的最小时间量。0 表示关闭这个功能，这也是缺省值。
            </listitem>
         </itemizedlist>
      </section>

      <section>
         <title>FIFOPolicy - 先进，先出</title>

         <para>
            <literal>org.jboss.cache.eviction.FIFOPolicy</literal> 以适当的先进先出方式控制驱逐。
            这个策略保证一个恒定的顺序（<literal>O (1)</literal>）添加、移除和查找（访问）。
            它有如下的配置参数：
         </para>

         <itemizedlist>
            <listitem>
               <literal>maxNodes</literal>
               - 在这个区域中，允许的最大节点数。0 表示没有限制。
            </listitem>
            <listitem>
               <literal>minTimeToLiveSeconds</literal>
               - 访问节点后考虑驱逐前，节点必须允许存活的最小时间量。0 表示关闭这个功能，这也是缺省值。
            </listitem>
         </itemizedlist>
      </section>


      <section>
         <title>MRUPolicy - 最近使用</title>

         <para>
            <literal>org.jboss.cache.eviction.MRUPolicy</literal> 基于最近使用算法控制驱逐。
            在这个策略中，最近使用节点将最先驱逐。这个策略保证一个恒定的顺序（<literal>O (1)</literal>）
            添加、移除和查找（访问）。它有下列配置参数：
         </para>

         <itemizedlist>
            <listitem>
               <literal>maxNodes</literal>
               - 在这个区域中，允许的最大节点数。0 表示没有限制。
            </listitem>
            <listitem>
               <literal>minTimeToLiveSeconds</literal>
               - 访问节点后考虑驱逐前，节点必须允许存活的最小时间量。0 表示关闭这个功能，这也是缺省值。
            </listitem>
         </itemizedlist>
      </section>

      <section>
         <title>LFUPolicy - 最少使用</title>

         <para>
            <literal>org.jboss.cache.eviction.LFUPolicy</literal> 基于最少使用算法控制驱逐。
            在这个策略中，最少使用的节点将最先驱逐。当节点首先添加时，节点使用数以 1 开始。
            每次访问节点，节点使用数增加 1。这个数字用于决定那个节点是最少使用的。
            <glossterm linkend="lfu">LFU</glossterm> 也是一个排序驱逐算法。
            底层的 EvictionQueue 实现和算法按照节点访问数的升序排序。
            这个类保证一个恒定顺序（<literal>O (1)</literal>）增加、移除和搜索。
            但是，当以给定处理数据途径添加/访问队列里的任意数量节点时，
            以正确的 LFU 顺序用单一的准线性（<literal>O (n * log n)</literal>）操作来重新排序队列。
            类似地，如果移除或驱逐任意节点，必须用单一的线性删除操作清除 EvictionQueue。
            LFU 有下列配置参数：
         </para>

         <itemizedlist>
            <listitem>
               <literal>maxNodes</literal>
               - 在这个区域中，允许的最大节点数。0 表示没有限制。
            </listitem>
            <listitem>
               <literal>minNodes</literal>
               - 在这个区域中，允许的最小节点数。这个值决定沿着每个路径向下，驱逐队列应用删除什么。
               例如，如果 minNodes 是 10，并且缓存增长到了 100 个节点，当驱逐计时器通过驱逐算法路径时，
               删除缓存到 10 个最常使用的节点。
            </listitem>
            <listitem>
               <literal>minTimeToLiveSeconds</literal>
               - 访问节点后考虑驱逐前，节点必须允许存活的最小时间量。0 表示关闭这个功能，这也是缺省值。
            </listitem>
         </itemizedlist>

      </section>

      <section>
         <title>ExpirationPolicy</title>

         <para>
            <literal>org.jboss.cache.eviction.ExpirationPolicy</literal> 是一个基于绝对期满时间驱逐节点的策略。
            使用 <literal>org.jboss.cache.Node.put()</literal> 方法、
            一个 String 键 <literal>expiration</literal> 和
            <literal>java.lang.Long</literal> 对象作为绝对时间指明期满时间。
            绝对时间是超过 1970.1.1 午夜后的毫秒 <glossterm linkend="utc">UTC</glossterm> 时间
            （与 <literal>java.lang.System.currentTimeMillis()</literal> 提供的相对时间相同）。
         </para>

         <para>
            这个策略保证一个恒定的顺序（<literal>O (1)</literal>）添加和移除。
            在内部，用一个排序集（TreeSet）包含期满时间和存储节点的<glossterm linkend="fqn">Fqn</glossterm>,
            从基本功能来说是个堆栈。
         </para>

         <para>
            这个策略有下列配置参数：
         </para>

         <itemizedlist>
            <listitem>
               <literal>expirationKeyName</literal>
               - 这是驱逐算法中使用的节点键名。缺省配置是 <literal>expiration</literal>。
            </listitem>
            <listitem>
               <literal>maxNodes</literal>
               - 在这个区域中，允许的最大节点数。0 表示没有限制。
            </listitem>
         </itemizedlist>

         <para>
            下列代码展示如何指明期满日期，以及如何应用策略：
         </para>
         <programlisting role="JAVA"><![CDATA[
   Cache cache = DefaultCacheFactory.createCache();
   Fqn fqn1 = Fqn.fromString("/node/1");
   Long future = new Long(System.currentTimeMillis() + 2000);

   // sets the expiry time for a node
   cache.getRoot().addChild(fqn1).put(ExpirationConfiguration.EXPIRATION_KEY, future);

   assertTrue(cache.getRoot().hasChild(fqn1));
   Thread.sleep(5000);

   // after 5 seconds, expiration completes
   assertFalse(cache.getRoot().hasChild(fqn1));
   ]]></programlisting>
         <para>
            注意，只有当区域管理器每隔 <literal>wakeUpIntervalSeconds</literal> 醒来时，
            才检查节点的期满时间，因此发生驱逐要比指明的时间稍晚几秒钟。
         </para>
      </section>
      <section>
         <title>ElementSizePolicy - 基于节点里键/值对数量驱逐</title>

         <para>
            <literal>org.jboss.cache.eviction.ElementSizePolicy</literal> 基于节点里键/值对数量控制驱逐。
            在这个策略里，最近使用的节点将最先驱逐。它有下列配置参数：
         </para>

         <itemizedlist>
            <listitem>
               <literal>maxNodes</literal>
               - 在这个区域中，允许的最大节点数。0 表示没有限制。
            </listitem>
            <listitem>
               <literal>maxElementsPerNode</literal>
               - 这是对于选择驱逐的每个节点的触发器数属性。0 表示没有限制。
            </listitem>
            <listitem>
               <literal>minTimeToLiveSeconds</literal>
               - 访问节点后考虑驱逐前，节点必须允许存活的最小时间量。0 表示关闭这个功能，这也是缺省值。
            </listitem>
         </itemizedlist>
      </section>
   </section>

   <section>
      <title>编写你自己的驱逐策略</title>
      <section>
         <title>驱逐策略插件设计</title>

         <para>JBoss Cache 驱逐策略框架设计是基于 <literal>EvictionInterceptor</literal> 的，
         用它来处理缓存事件，并转发到驱逐策略。在缓存启动期间，如果声明了驱逐策略，
         将添加一个 <literal>EvictionInterceptor</literal> 到缓存的拦截器堆栈。
         然后，一旦添加、移除、驱逐或访问节点，<literal>EvictionInterceptor</literal> 将维护状态统计数据，
         并向每个单独驱逐区域转发信息。
         </para>

         <para>
            有一个单独驱逐线程（定时器）在配置的时间间隔运行。
            这个线程将调用提供的每个策略，在配置的间隔期间，
            通知它任意汇总的对缓存的添加、移除和访问（取）事件。
            驱逐线程负责启动每个配置驱逐缓存区域的驱逐策略处理过程（单程）。
         </para>
      </section>

      <section>
         <title>实现的接口</title>
         <para>为了实现一个驱逐策略，必须实现下列接口：
            <itemizedlist>
               <listitem>
                  <literal>org.jboss.cache.eviction.EvictionPolicy</literal>
               </listitem>
               <listitem>
                  <literal>org.jboss.cache.eviction.EvictionAlgorithm</literal>
               </listitem>
               <listitem>
                  <literal>org.jboss.cache.eviction.EvictionQueue</literal>
               </listitem>
               <listitem>
                  <literal>org.jboss.cache.config.EvictionPolicyConfig</literal>
               </listitem>
            </itemizedlist>
            这些接口的每一个实现混合在一起，定义驱逐策略完整实现的所有必须底层机制。
         </para>

         <para>
            <emphasis>注意：</emphasis>
         </para>

         <itemizedlist>
            <listitem>
               <para>
                  <literal>EvictionPolicyConfig</literal> 实现应该维护策略支持的配置属性的
                  getter 和 setter 方法（例如 <literal>LRUConfiguration</literal> 其中就包含一个
                  <literal>int getMaxNodes()</literal> 和一个 <literal>setMaxNodes(int)</literal>）。
                  当 XML 配置的“EvictionConfig”部分解析时，这些属性通过反射设置。
               </para>
            </listitem>
         </itemizedlist>

         <para>做为选择，通过扩展 <literal>BaseEvictionPolicy</literal>
         和 <literal>BaseEvictionAlgorithm</literal>来实现新的驱逐策略可能简单些。
         或者扩展 <literal>BaseSortedEvictionAlgorithm</literal> 并实现
            <literal>SortedEvictionQueue</literal> 来得到正确的排序驱逐算法
            （驱逐顺序的排序，查看<literal>LFUAlgorithm</literal>）。
            这些驱逐策略提供类中已经有很多通用的功能。
         </para>


         <para>
            <emphasis>注意：</emphasis>
         </para>

         <itemizedlist>
            <listitem>
               <para>
                  <literal>BaseEvictionAlgorithm</literal> 类维护一个处理结构。
                  它将先处理的区域的 ADD, REMOVE 和 VISIT 时间队列。
                  它也维护一个，因为持有锁在最后巡视过程中没有正确驱逐的数据集合。
                  那个列是要删除的。最后，基于配置的区域驱逐规则删除 EvictionQueue 自己的数据。
               </para>
            </listitem>
            <listitem>
               <para>
                  <literal>BaseSortedEvictionAlgorithm</literal> 类通过算法处理将维护一个布尔值，
                  来决定是否添加或访问任意新节点。这允许算法来决定是否重新排序驱逐队列数据（先于驱逐顺序），
                  或者如果这个区域里没有什么修改而跳过潜在地昂贵的排序。
               </para>
            </listitem>
            <listitem>
               <para>
                  <literal>SortedEvictionQueue</literal> 接口定义由
                  <literal>BaseSortedEvictionAlgorithm</literal> 抽象类使用的约定，
                  <literal>BaseSortedEvictionAlgorithm</literal> 用于重新排序底层队列。
                  还是那样，队列排序应该先于驱逐顺序。列里的第一个数据应该先于队列里的最后数据驱逐。
                  队列里的最后数据应该是需要驱逐的最后数据。
               </para>
            </listitem>
         </itemizedlist>
      </section>
   </section>
</chapter>