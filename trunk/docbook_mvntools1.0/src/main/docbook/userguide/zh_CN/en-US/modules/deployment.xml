<chapter id="deployment">
   <title>部署 JBoss Cache</title>
   <section id="deployment.standalone">
      <title>独立使用/编程部署</title>
      <para>
         当在一个独立的 Java 程序中使用时，
         所要做的事情就是用
         <literal>CacheFactory</literal> 
         和一个
         <literal>Configuration</literal> 实例或一个 XML 文件初始化缓存。
         其中配置实例或 XML 文件的配置方法，在
         <link linkend="api.create_start">用户 API</link>
         和
         <link linkend="configuration.creation">配置</link>中章节讨论过。
      </para>

      <para>
         当应用程序在一个应用服务器中运行，
         同时想要通过编程的方式部署缓存而不是依赖应用服务器的部署功能，
         也可以用与上述技术相同的技术来完成。
         这种方法的例子就是，一个 Web 应用通过
         <literal>javax.servlet.ServletContextListener</literal> 部署一个缓存。
      </para>

      <para>
         如果部署后，希望通过 <glossterm linkend="jmx">JMX</glossterm> 方式暴露一个管理接口，可以查看
         <link linkend="jmx.registration.programatic">有关在 JMX 中编程注册的章节</link>。
      </para>
   </section>

   <section id="deployment.microkernel">
      <title>在 JBoss <glossterm linkend="as">AS</glossterm> （JBoss AS 5.x 和 4.x）中基于 JMX 部署</title>
      <para>如果 JBoss Cache 是在 JBoss AS 中运行，
      那么可以简单地将缓存部署成一个 MBean，
      方法是将一个标准的缓存配置文件拷贝到服务器的
         <literal>deploy</literal> 目录。
         标准格式的 JBoss Cache 标准 XML 配置文件（参见
         <link linkend="sample_xml_file">参考配置</link>）
         与 JBoss AS MBean  部署描述符相同，
         因此 AS 的<glossterm linkend="sar">SAR</glossterm> 部署器处理起来没有任何问题。
         同时，你不必一定要将配置文件放在
         <literal>deploy</literal>目录下，
         你可以将它与其他服务或 JEE 组件打包在 SAR 或 EAR 里面。
      </para>

      <para>
         在 AS 5 里面，如果是基于标准的<literal>all</literal>配置使用一个服务器，
         那么这就是你需要做的全部事情了，因为所有需要的 jar 都在类路径上了。
         其他情况下，你需要保证
         <literal>jbosscache.jar</literal>
         和
         <literal>jgroups-all.jar</literal>
         在你的类路径上。
         如果你使用 <literal>JdbmCacheLoader</literal> 之类的功能，
         你可能需要添加其他的 jar。
         最简单的做法是，将 JBoss Cache 发布程序
         <literal>lib</literal> 目录下的 jar 拷贝到服务器的
         <literal>lib</literal> 配置目录下。
         你也可以将配置文件和 jar 都打包成到服务归档（.sar）文件或一个 EAR 里面。
      </para>

      <para>
         将 JBoss Cache 2.0 实例部署到 JBoss AS 4.x 是可行的
         （至少是 4.2.0.GA，其他 AS 版本没有经过充分测试）。
         但是，JBoss Cache 2.x 版本 和 1.x 版本之间 API 的变化还是很大的，
         这就意味着依赖 JBoss Cache 的标准 AS 4.x 集群服务
         （例如http session 复制）都不能与 JBoss Cache 2.x 协同工作。
         也要意识到，JBoss Cache 的开发人员没有充分测试在 AS 4.x 中使用 JBoss Cache 2.x 的情况。
         因此，你自己要保证充分测试你的应用程序（总之，这当然是你正在做的）。
      </para>

      <para>
         注意，在
         <link linkend="sample_xml_file">例子</link>中，
         <literal>mbean</literal> 元素值的
         <literal>code</literal> 属性：
         <literal>org.jboss.cache.jmx.CacheJmxWrapper</literal>，
         这是 JBoss Cache 使用的处理 JMX 集成的类。
         <literal>Cache</literal> 自己并不暴露一个 MBean 接口。
         查看
         <link linkend="jmx.mbeans">JBoss Cache MBeans 章节</link>，
         了解有关 <literal>CacheJmxWrapper</literal> 更详细内容。
      </para>

      <para>
         一旦你的缓存部署好了，为了 VM 内的客户，例如一个 servlet，使用它，
         可以用一个 JMX 代理得到缓存的引用：
      </para>

      <programlisting role="JAVA"><![CDATA[
   MBeanServer server = MBeanServerLocator.locateJBoss();
   ObjectName on = new ObjectName("jboss.cache:service=Cache");
   CacheJmxWrapperMBean cacheWrapper =
     (CacheJmxWrapperMBean) MBeanServerInvocationHandler.newProxyInstance(server, on,
                                             CacheJmxWrapperMBean.class, false);
   Cache cache = cacheWrapper.getCache();
   Node root = cache.getRoot(); // etc etc
   ]]></programlisting>

      <para>MBeanServerLocator 类是一个在当前 JVM 中查找 JBoss MBean 服务的辅助工具。
      <literal>javax.management.MBeanServerInvocationHandler</literal> 类的
      <literal>newProxyInstance</literal> 方法创建一个指定接口的动态代理实现，
      并基于 MBean 产生接口用 JMX 去动态匹配方法调用。
      用于查找 MBean 的名称与缓存配置文件里定义的名称是相同的。
      </para>

      <para>
         一旦获得 <literal>CacheJmxWrapper</literal> 的代理，
         <literal>getCache()</literal> 将返回
         <literal>Cache</literal> 自身的一个引用。
      </para>

   </section>

   <section id="deployment.microcontainer">
      <title>通过 JBoss Microcontainer （JBoss AS 5.x）部署</title>

      <para>
         从 AS 5 开始，JBoss AS 也支持部署 <glossterm linkend="pojo">POJO</glossterm> 服务，
         方法是部署一个文件名用
         <literal>-beans.xml</literal> 结尾的文件。
         一个 POJO 服务是一个用 “简单 Java 对象（Plain Old Java Object）”实现的服务，
         这意味着简单 Java Bean 不需要实现某一特定接口或扩展某一特定超类。
         一个 <literal>Cache</literal> 就是一个 POJO 服务，所有
         <literal>Configuration</literal> 里的组件也是 POJO。
         因此，用这种方法部署缓存很自然。
      </para>
      <para>
         部署缓存是通过使用 JBoss Microcontainer 完成，
         JBoss Microcontainer 形成了 JBoss AS 的核心。
         JBoss Microcontainer 是一个成熟的 IOC 框架（类似于 Spring）。
         从根本上说，一个 <literal>-beans.xml</literal> 文件就是一个描述符，
         这个描述符告诉 IOC 框架如何将不同 Bean 组装起来形成一个 POJO 服务。
      </para>
      <para>
         对于每个
         <literal>Configuration</literal> 组件暴露的配置选项，
         配置类里都定义了 getter/setter。
         这么做是必须的，以便于当配置对应属性时，
         JBoss Microcontainer 能够用典型的 IOC 方式调用这些方法。
      </para>      
      <para>
         如何部署文件、如何打包、如何确保需要的 jar 在类路径上等等的规则，
         都与
         <link linkend="deployment.microkernel">基于 JMX 部署</link>相同。
      </para>
      <para>
         下面是一个例子 <literal>-beans.xml</literal> 文件。
         如果你在 AS 5 的
         <literal>server/all/deploy</literal> 安装目录下查找，
         你能找到更多例子。
      </para>

      <programlisting role="XML"><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>

<deployment xmlns="urn:jboss:bean-deployer:2.0">

   <!-- First we create a Configuration object for the cache -->
   <bean name="ExampleCacheConfig"
   		 class="org.jboss.cache.config.Configuration">
      
      <!-- Externally injected services -->  
      <property name="runtimeConfig">
         <bean name="ExampleCacheRuntimeConfig" class="org.jboss.cache.config.RuntimeConfig">
            <property name="transactionManager">
               <inject bean="jboss:service=TransactionManager" 
                       property="TransactionManager"/>
            </property>
            <property name="muxChannelFactory"><inject bean="JChannelFactory"/></property>
         </bean>
      </property>
      
      <property name="multiplexerStack">udp</property>

      <property name="clusterName">Example-EntityCache</property>
        
      <!--
              Node locking level : SERIALIZABLE
                                   REPEATABLE_READ (default)
                                   READ_COMMITTED
                                   READ_UNCOMMITTED
                                   NONE
      -->
      <property name="isolationLevel">REPEATABLE_READ</property>

      <!--     Valid modes are LOCAL
                               REPL_ASYNC
                               REPL_SYNC
      -->
      <property name="cacheMode">REPL_SYNC</property>

      <!--  The max amount of time (in milliseconds) we wait until the
            initial state (ie. the contents of the cache) are retrieved from
            existing members in a clustered environment
      -->
      <property name="initialStateRetrievalTimeout">15000</property>

      <!--    Number of milliseconds to wait until all responses for a
              synchronous call have been received.
      -->
      <property name="syncReplTimeout">20000</property>

      <!--  Max number of milliseconds to wait for a lock acquisition -->
      <property name="lockAcquisitionTimeout">15000</property>
        
      <property name="exposeManagementStatistics">true</property>
      
      <!-- Must be true if any entity deployment uses a scoped classloader -->
      <property name="useRegionBasedMarshalling">true</property>
      <!-- Must match the value of "useRegionBasedMarshalling" -->
      <property name="inactiveOnStartup">true</property>

      <!--  Specific eviction policy configurations. This is LRU -->
      <property name="evictionConfig">
      	 <bean name="ExampleEvictionConfig" 
      	       class="org.jboss.cache.config.EvictionConfig">
      	    <property name="defaultEvictionPolicyClass">
      	       org.jboss.cache.eviction.LRUPolicy
      	    </property>
            <property name="wakeupIntervalSeconds">5</property>
            <property name="evictionRegionConfigs">
               <list>
                  <bean name="ExampleDefaultEvictionRegionConfig" 
                        class="org.jboss.cache.config.EvictionRegionConfig">
                     <property name="regionName">/_default_</property>
            	     <property name="evictionPolicyConfig">
                        <bean name="ExampleDefaultLRUConfig" 
                              class="org.jboss.cache.eviction.LRUConfiguration">
                           <property name="maxNodes">5000</property>
                           <property name="timeToLiveSeconds">1000</property>
                        </bean>
                     </property>
                  </bean>
               </list>
            </property>
         </bean>
      </property>
      
   </bean>
   
   <!-- Factory to build the Cache. -->
   <bean name="DefaultCacheFactory" class="org.jboss.cache.DefaultCacheFactory">      
      <constructor factoryClass="org.jboss.cache.DefaultCacheFactory" 
                   factoryMethod="getInstance"/>
   </bean>
   
   <!-- The cache itself -->
   <bean name="ExampleCache" class="org.jboss.cache.Cache">
      
      <constructor factoryMethod="createCache">
          <factory bean="DefaultCacheFactory"/>
          <parameter class="org.jboss.cache.config.Configuration"><inject bean="ExampleCacheConfig"/></parameter>
          <parameter class="boolean">false</false>
      </constructor>
          
   </bean>

</deployment>      
]]></programlisting>

      <para>
         查看 JBoss Microcontainer 的文档
         <footnote>
            <para>http://labs.jboss.com/jbossmc/docs</para>
         </footnote>，
         了解上述语法的细节。
         从根本上说，每个 <literal>bean</literal> 元素代表一个对象，
         大多数元素一起构建一个
         <literal>Configuration</literal>
         和它的
         <link linkend="configuration.elements">组件</link>。
      </para>
      <para>
         需要注意的一件有趣事情是，在上面的例子中使用了
         <literal>RuntimeConfig</literal> 对象。
         外部的资源，象
         <literal>TransactionManager</literal>
         和 JGroups 的
         <literal>ChannelFactory</literal>，凡是对 microcontainer 可见的，
         都可以插入 <literal>RuntimeConfig</literal>。
         假定条件就是，这里引用的 Bean 在 AS 的其他部署描述符中描述了。
      </para>
   </section>

   <section>
      <title>在 JBoss AS 中绑定到 <glossterm linkend="jndi">JNDI</glossterm></title>
      <para>
         在 1.x 版本的 JBoss Cache 中，缓存的代理可以绑定到 JBoss AS 的 JNDI 树上，
         这是通过使用 AS 的 <literal>JRMPProxyFactory</literal> 服务完成的。
         在 JBoss Cache 2.x 中，这么做不行了。
         另一个达到相同效果的方法正在由JBoss AS 组
         <footnote>
            <para>http://jira.jboss.com/jira/browse/JBAS-4456</para>
         </footnote> 开发，是由象一个
         <literal>Cache</literal> 一样的一个POJO （例如，不基于 JMX）服务实现，。
         在撰写本文时，这个功能还没有完成，但它在发布 AS 5.0.0.GA 版本之前会完成。
         一旦能用时，我们会添加一个 wiki 页来描绘如何使用它。
      </para>
   </section>

   <section>
      <title>运行管理信息</title>
      <para>JBoss Cache 通过 JMX MBeans 来暴露缓存功能，
      并提供用于分析缓存操作的统计信息。
      JBoss Cache 也可以将缓存事件广播为 MBean 通知，通过 JMX 监视工具来处理。
      </para>

      <section id="jmx.mbeans">
         <title>JBoss Cache MBeans</title>
         <para>
            JBoss Cache 提供一个 MBean，这个 MBean 可以注册在你的 JMX 服务器环境中，
            允许通过 JMX 访问缓存实例。
            这个 MBean 是
            <literal>org.jboss.cache.jmx.CacheJmxWrapper</literal>。
            它是一个 StandardMBean，因此它的 MBean 接口是
            <literal>org.jboss.cache.jmx.CacheJmxWrapperMBean</literal>。
            这个 MBean 可以用于：
            <itemizedlist>
               <listitem>得到一个底层
                  <literal>Cache</literal>的引用。
               </listitem>
               <listitem>调用底层
                  <literal>Cache</literal> 的 create/start/stop/destroy 生命周期操作。
               </listitem>
               <listitem>检查缓存当前状态的不同详细情况（节点数，加锁信息等）。
               </listitem>
               <listitem>查看缓存配置的众多详细信息，并当缓存启动后修改其中那些能够修改的配置信息。
               </listitem>
            </itemizedlist>
            查看 <literal>CacheJmxWrapperMBean</literal> 的 javadoc 了解更详细信息。
         </para>
         <para>
            需要重点关注的是，JBoss Cache 1.x 版本和 2.x 版本之间体系结构的显著差别。
            在 1.x 版本中，旧的 <literal>TreeCache</literal> 类本身自己就是一个 MBean，
            基本上通过 JMX 暴露了整个缓存 API。
            在 2.x 版本中，JMX 回归到作为管理层的基础角色。
            <literal>Cache</literal> 对象本身完全不知道 JMX 的存在，
            反倒是为了这个目的通过一个包装类添加 JMX 功能。
            而且，通过 JMX 暴露的接口仅限于管理功能，
            普通的 <literal>Cache</literal> API 不在通过 JMX 暴露。
            例如，不可能通过 JMX 接口调用缓存的
            <literal>put</literal>
            或
            <literal>get</literal> 方法。
         </para>
         <para>
            如果注册一个 <literal>CacheJmxWrapper</literal>，
            JBoss Cache 也为缓存拦截器堆栈中配置的每个拦截器提供 MBeans。
            这些 MBeans 用于获得和输出有关缓存操作的统计数据。
            它们与 <literal>CacheJmxWrapper</literal> MBean 分层关联，
            并有反应关系的服务名称。
            例如，一个
            <literal>jboss.cache:service=TomcatClusteringCache</literal>
            实例的复制拦截器 MBean，
            可以通过服务名
            <literal>jboss.cache:service=TomcatClusteringCache,cache-interceptor=ReplicationInterceptor</literal>
            访问。
         </para>
      </section>

      <section id="jmx.registration">
         <title>在 MBeanServer 中注册 CacheJmxWrapper</title>

         <para>
            在 JMX 中，确保 <literal>CacheJmxWrapper</literal> 已经注册的最佳方法，
            与如何部署你的缓存有关：
         </para>

         <section id="jmx.registration.programatic">
            <title>编程注册</title>

            <para>
               最简单的做法是创建你的 <literal>Cache</literal>，
               并将它传递给 <literal>CacheJmxWrapper</literal> 构造器。
            </para>

            <programlisting role="JAVA"><![CDATA[
   CacheFactory factory = new DefaultCacheFactory();
   // Build but don't start the cache
   // (although it would work OK if we started it)
   Cache cache = factory.createCache("cache-configuration.xml", false);

   CacheJmxWrapperMBean wrapper = new CacheJmxWrapper(cache);
   MBeanServer server = getMBeanServer(); // however you do it
   ObjectName on = new ObjectName("jboss.cache:service=TreeCache");
   server.registerMBean(wrapper, on);

   // Invoking lifecycle methods on the wrapper results
   // in a call through to the cache
   wrapper.create();
   wrapper.start();

   ... use the cache

   ... on application shutdown

   // Invoking lifecycle methods on the wrapper results
   // in a call through to the cache
   wrapper.stop();
   wrapper.destroy();
            ]]></programlisting>

            <para>
               另外，也可以构造一个 <literal>Configuration</literal> 对象，
               并把它传递给 <literal>CacheJmxWrapper</literal>。
               包装器会创建 <literal>Cache</literal>：
            </para>

            <programlisting role="JAVA"><![CDATA[
   Configuration config = buildConfiguration(); // whatever it does

   CacheJmxWrapperMBean wrapper = new CacheJmxWrapper(config);
   MBeanServer server = getMBeanServer(); // however you do it
   ObjectName on = new ObjectName("jboss.cache:service=TreeCache");
   server.registerMBean(wrapper, on);

   // Call to wrapper.create() will build the Cache if one wasn't injected
   wrapper.create();
   wrapper.start();

   // Now that it's built, created and started, get the cache from the wrapper
   Cache cache = wrapper.getCache();

   ... use the cache

   ... on application shutdown

   wrapper.stop();
   wrapper.destroy();
            ]]></programlisting>
         </section>

         <section>
            <title>在 JBoss AS （JBoss AS 4.x 和 5.x）中基于 JMX 部署</title>

            <para>
               当你
               <link linkend="deployment.microkernel">用一个 -service.xml 文件在 JBoss AS 中部署你的缓存时</link>，
               会自动注册一个 <literal>CacheJmxWrapper</literal>。
               不需要做其他事情。
               <literal>CacheJmxWrapper</literal> 可以通过缓存配置文件中
               <literal>mbean</literal> 元素的服务名，从一个 MBean 服务器访问。
            </para>
         </section>

         <section>
            <title>通过 JBoss Microcontainer （JBoss AS 5.x）部署</title>

            <para>
               <literal>CacheJmxWrapper</literal> 是一个 POJO，
               因此，Microcontainer 构建它没有问题。
               窍门就是在 JMX 中注册你的 Bean。
               这可以通过在<literal>CacheJmxWrapper</literal> bean 上指定
               <literal>org.jboss.aop.microcontainer.aspects.jmx.JMX</literal>
               注释来完成：
            </para>

            <programlisting role="XML"><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>

<deployment xmlns="urn:jboss:bean-deployer:2.0">

   <!-- First we create a Configuration object for the cache -->
   <bean name="ExampleCacheConfig"
   		 class="org.jboss.cache.config.Configuration">
      
      ... build up the Configuration
      
   </bean>
   
   <!-- Factory to build the Cache. -->
   <bean name="DefaultCacheFactory" class="org.jboss.cache.DefaultCacheFactory">      
      <constructor factoryClass="org.jboss.cache.DefaultCacheFactory" 
                   factoryMethod="getInstance"/>
   </bean>
   
   <!-- The cache itself -->
   <bean name="ExampleCache" class="org.jboss.cache.CacheImpl">
      
      <constructor factoryMethod="createnewInstance">
          <factory bean="DefaultCacheFactory"/>
          <parameter><inject bean="ExampleCacheConfig"/></parameter>
          <parameter>false</false>
      </constructor>
          
   </bean>
   
   <!-- JMX Management -->
   <bean name="ExampleCacheJmxWrapper" class="org.jboss.cache.jmx.CacheJmxWrapper">
      
      <annotation>@org.jboss.aop.microcontainer.aspects.jmx.JMX(name="jboss.cache:service=ExampleTreeCache", 
                         exposedInterface=org.jboss.cache.jmx.CacheJmxWrapperMBean.class, 
                         registerDirectly=true)</annotation>
      
      <constructor>
          <parameter><inject bean="ExampleCache"/></parameter>
      </constructor>
          
   </bean>

</deployment>      
]]></programlisting>

            <para>
               象在
               <link linkend="jmx.registration.programatic">编程注册</link>
               章节中讨论的一样，如果提供一个 <literal>Configuration</literal>，
               <literal>CacheJmxWrapper</literal> 可以完成建立、创建和启动
               <literal>Cache</literal>的工作。
               在 Microcontainer 中，这是首选的方法，因为这节省了创建
               <literal>CacheFactory</literal> 所需样本 XML 的工作：
            </para>

            <programlisting role="XML"><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>

<deployment xmlns="urn:jboss:bean-deployer:2.0">

   <!-- First we create a Configuration object for the cache -->
   <bean name="ExampleCacheConfig"
   		 class="org.jboss.cache.config.Configuration">
      
      ... build up the Configuration
      
   </bean>
    
   <bean name="ExampleCache" class="org.jboss.cache.jmx.CacheJmxWrapper">
      
      <annotation>@org.jboss.aop.microcontainer.aspects.jmx.JMX(name="jboss.cache:service=ExampleTreeCache", 
                         exposedInterface=org.jboss.cache.jmx.CacheJmxWrapperMBean.class, 
                         registerDirectly=true)</annotation>
      
      <constructor>
          <parameter><inject bean="ExampleCacheConfig"/></parameter>
      </constructor>
          
   </bean>

</deployment>      
]]></programlisting>
         </section>

      </section>

      <section id="jmx.statistics">
         <title>JBoss Cache 统计数据</title>
         <para>
            JBoss Cache 在它的拦截器中获得统计数据，并通过拦截器 MBean 输出统计数据。
            缺省的情况下，收集统计数据的开关是打开的，
            对于某一指定缓存实例，它也可以通过
            <literal>ExposeManagementStatistics</literal> 配置属性关闭。
            注意，主要的统计数据是通过
            <literal>CacheMgmtInterceptor</literal> 提供的，
            因此，从这个角度讲这个 MBean 是最重要的。
            如果你因为性能原因想关闭所有统计数据，
            你可以将 <literal>ExposeManagementStatistics</literal> 设为
            <literal>false</literal>，在缓存启动时这将阻止缓存拦截堆栈包含
            <literal>CacheMgmtInterceptor</literal>。
         </para>
         <para>
            如果在 JMX 中注册了一个 <literal>CacheJmxWrapper</literal>，
            包装器也保证为每个输出统计信息的拦截器在 JMX 中注册一个 MBean
            <footnote>
               <para>
                  注意：如果 <literal>CacheJmxWrapper</literal> 没有在 JMX 中注册，
                  拦截器 MBeans 也就没有注册。
                  JBoss Cache 1.4 版本包括试图“发现”一个
                  <literal>MBeanServer</literal> 的代码，
                  并自动用它注册拦截器 MBeans。
                  在 JBoss Cache 2.x 版本中，我们决定这种“发现”JMX环境的功能已经超出了缓冲库的正常范围，
                  所以，我们去掉了这个功能。
               </para>
            </footnote>。
            这样，管理工具可以访问这些 MBeans，来检查统计数据。
            查看
            <link linkend="jmx_reference.statistics">JMX 参考章节</link>中有关统计数据的部分，
            这些统计数据是通过 JMX 得到的。
         </para>
         <para>
            注册的拦截器 MBeans 的名字是从 <literal>CacheJmxWrapper</literal> 注册的
            <literal>ObjectName</literal> 导出的，
            并添加了 <literal>cache-interceptor</literal> 属性键，
            这个属性键是拦截器类的非全名。
            因此，例如，如果 <literal>CacheJmxWrapper</literal> 的注册名是
            <literal>jboss.cache:service=TreeCache</literal>，
            <literal>CacheMgmtInterceptor</literal> MBean 名就是
            <literal>jboss.cache:service=TreeCache,cache-interceptor=CacheMgmtInterceptor</literal>。
         </para>
         <para>
            每个拦截器的 MBean 暴露一个 <literal>StatisticsEnabled</literal> 属性，
            可以用于关闭这个拦截器的保持统计功能。
            另外，每个拦截器 MBean 提供下列通用操作和属性：
            <itemizedlist>
               <listitem>
                  <literal>dumpStatistics</literal>
                  - 返回一个
                  <literal>Map</literal>，包含拦截器的属性和值。
               </listitem>
               <listitem>
                  <literal>resetStatistics</literal>
                  - 重设拦截器维护的所有统计信息。
               </listitem>
               <listitem>
                  <literal>setStatisticsEnabled(boolean)</literal>
                  - 允许关闭某一拦截器的统计功能。
               </listitem>
            </itemizedlist>
         </para>
         <para>
         </para>
      </section>

      <section>
         <title>接受 JMX 通知</title>
         <para>
            JBoss Cache 用户可以注册一个监听器，来接受先前
            <link linkend="api.listener">用户 API</link> 章节描述的缓存事件。
            用户可以选择利用缓存管理信息基础结构，通过 JMX 通知来接受这些事件。
            通过为 <literal>CacheJmxWrapper</literal> 注册一个
            <literal>NotificationListener</literal>，
            就可以用通知来得到缓存事件。
         </para>

         <para>
            查看
            <link linkend="jmx_reference.notifications">JMX 参考章节</link>里有关 JMX 通知的部分，
            那里有能通过
            <literal>CacheJmxWrapper</literal> 来接受的通知列表。
         </para>


         <para>
            下面是一个例子，介绍当在 JBoss AS 环境中运行时，如何通过编程接受缓存通知。
            在这个例子中，客户用一个过滤器指定感兴趣的事件。
         </para>

         <programlisting role="JAVA"><![CDATA[
   MyListener listener = new MyListener();
   NotificationFilterSupport filter = null;

   // get reference to MBean server
   Context ic = new InitialContext();
   MBeanServerConnection server = (MBeanServerConnection)ic.lookup("jmx/invoker/RMIAdaptor");

   // get reference to CacheMgmtInterceptor MBean
   String cache_service = "jboss.cache:service=TomcatClusteringCache";
   ObjectName mgmt_name = new ObjectName(cache_service);

   // configure a filter to only receive node created and removed events
   filter = new NotificationFilterSupport();
   filter.disableAllTypes();
   filter.enableType(CacheNotificationBroadcaster.NOTIF_NODE_CREATED);
   filter.enableType(CacheNotificationBroadcaster.NOTIF_NODE_REMOVED);

   // register the listener with a filter
   // leave the filter null to receive all cache events
   server.addNotificationListener(mgmt_name, listener, filter, null);

   // ...

   // on completion of processing, unregister the listener
   server.removeNotificationListener(mgmt_name, listener, filter, null);
         ]]></programlisting>

         <para>下面是在上一个例子使用的，简单通知监听器实现的代码。</para>
         <programlisting role="JAVA"><![CDATA[
   private class MyListener implements NotificationListener, Serializable
   {
      public void handleNotification(Notification notification, Object handback)
      {
         String message = notification.getMessage();
         String type = notification.getType();
         Object userData = notification.getUserData();

         System.out.println(type + ": " + message);

         if (userData == null)
         {
            System.out.println("notification data is null");
         }
         else if (userData instanceof String)
         {
            System.out.println("notification data: " + (String) userData);
         }
         else if (userData instanceof Object[])
         {
            Object[] ud = (Object[]) userData;
            for (Object data : ud)
            {
               System.out.println("notification data: " + data.toString());
            }
         }
         else
         {
            System.out.println("notification data class: " + userData.getClass().getName());
         }
      }
   }
         ]]></programlisting>

         <para>注意：只有客户注册接受 MBean 通知后，JBoss Cache 管理实现才监听缓存事件。
         一旦没有客户注册接受通知，MBean 将去掉自己作为缓存监听器的角色。
         </para>

      </section>

      <section>
         <title>在一个独立环境中访问缓存 MBeans</title>
         <para>
            在一个支持 MBean 服务接口的应用服务器中运行缓存实例时，例如 JBoss JMX 控制台，
            很容易访问 JBoss Cache MBeans。
            参考你的服务器文档，查找如果访问服务器 MBean 容器中运行的 MBean的相关介绍。
         </para>
         <para>
            另外，虽然在非服务器环境中运行，如果 JVM 是 JDK 5.0 或更高，JBoss Cache MBeans 也可以访问到。
            当在 JDK 5.0 环境中运行一个独立的缓存，你可以象下面这样访问缓存 MBeans。
         </para>
         <para>
            <orderedlist>
               <listitem>
                  当启动缓存运行的 JVM 时，设定系统属性
                  <literal>-Dcom.sun.management.jmxremote</literal>。
               </listitem>
               <listitem>
                  一旦 JVM 运行起来，启动 JDK 5.0 <literal>jconsole</literal> 工具，
                  它在你的 JDK 的 <literal>/bin</literal> 目录下。
               </listitem>
               <listitem>当工具加载后，你就能够选择你的运行 JVM 并连接它。
               在 MBean 面板处，你能得到 JBoss Cache MBeans。
               </listitem>
            </orderedlist>
         </para>
         <para>注意：当连接到运行 JBoss Cache 实例的 JVM 时，
         <literal>jconsole</literal> 工具自动注册为缓存通知的监听器。
         </para>

         <para>下面的图显示 <literal>jconsole</literal> 中的缓存拦截器 MBeans。
          显示<literal>CacheMgmtInterceptor</literal> 的缓存统计数据：
         </para>

         <figure>
            <title>jconsole 中的 CacheMgmtInterceptor MBean</title>

            <mediaobject>
               <imageobject>
                  <imagedata fileref="CacheMgmtInterceptor.png"/>
               </imageobject>
            </mediaobject>
         </figure>

      </section>
   </section>
</chapter>
