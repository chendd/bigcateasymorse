<?xml version="1.0" encoding="UTF-8"?>
<chapter id="introduction">
   <title>概述</title>

   <section>
      <title>JBoss Cache 是什么？</title>

      <para>
         JBoss Cache 是一个树形结构的，支持集群、支持事务的缓存技术。
         对于 JBoss 应用服务器支持集群服务的几个版本来说，
         它也是除了集群 <glossterm linkend="jndi">JNDI</glossterm>、HTTP 和 EJB 会话等技术之外的另外一项骨干技术。
      </para>
      <para>
         JBoss  Cache 可以用作独立的支持事务和集群的缓存库，
         或者是一个面向对象的数据存储。
         可以将它嵌入到其他的企业级 Java 框架和应用服务器中，
         例如 BEA WebLogic，IBM WebSphere, Tomcat, Spring, Hibernate, 以及其他软件。
         它的另一个常用方式就是，独立的 Java 应用程序用它维护集群状态，
         而这些独立的 Java 应用程序并不运行在应用服务器内。
      </para>
      <section>
         <title><glossterm linkend="pojo">Pojo</glossterm> Cache 又是什么？</title>
         <para>
            Pojo Cache 是核心 JBoss Cache <glossterm linkend="api">API</glossterm> 的一个扩展。
            Pojo Cache 提供了额外的功能，例如：
            <itemizedlist>
               <listitem>即便经过复制或持久存储，仍能维护对象之间的引用。</listitem>
               <listitem>细粒度控制复制，即只复制修改过的对象字段。</listitem>
               <listitem>“弱化 API”的集群模式，即仅通过注释的方式将 <glossterm linkend="pojo">Pojo</glossterm> 注释为支持集群的。</listitem>
            </itemizedlist>
         </para>
         <para>
            Pojo Cache 拥有一套完整、独立的文档，
            包括一个用户指导、<glossterm linkend="faq">FAQ</glossterm> 和指南，
            所以在这本书中不会详细讨论 Pojo Cache 。
         </para>
      </section>

   </section>

   <section>
      <title>功能摘要</title>

      <para>
         JBoss Cache 提供了一个简明易懂的 <glossterm linkend="api_gloss">API</glossterm>,
         可以将数据（简单的 Java 对象）放置在缓存里面，通过选择的参数进行配置。
         这些参数可以是下列的其中一项或者全部：
         <itemizedlist>
            <listitem>复制到集群中的某些或全部缓存实例。</listitem>
            <listitem>持久存储到磁盘和（或）远程集群（远程缓存）。</listitem>
            <listitem>当内存消耗殆尽时进行垃圾回收，
            并钝化（<glossterm linkend="passivation">Passivation</glossterm>）到磁盘而状态不丢。
            </listitem>
         </itemizedlist>
         另外，JBoss Cache 提供一系列的企业级功能：
         <itemizedlist>
            <listitem>可以加入到 <glossterm linkend="jta">JTA</glossterm> 事务中
            （与符合 Java EE 标准的事务管理器协同工作）。
            </listitem>
            <listitem>当加入到 JMX 服务器的时候，可以提供缓存状态的运行统计数据。
            </listitem>
            <listitem>允许客户代码添加监听器，接受缓存事件通知。</listitem>
         </itemizedlist>
      </para>

      <para>缓存数据被组织成树形结构，带有一个根结点。
      树上的每个节点本质上包含一个映射结构（<glossterm linkend="map">Map</glossterm>），
      以键/值对的形式存储数据。
      对于缓存中放置对象的基本要求是，它必须实现
         <literal>java.io.Serializable</literal>
         接口。注意：如果是<glossterm linkend="pojo">Pojo</glossterm> Cache，则不存在这个要求。
      </para>

      <para>JBoss Cache 可以是本地或者是复制的。本地树仅存在于建立它
      的 <glossterm linkend="jvm">JVM</glossterm> 内部，
      而复制树可以将数据的修改扩散到同一集群内的某些树或所有树。
      一个集群可以跨越网络上不同主机，或者同一个主机的不同 <glossterm linkend="jvm">JVM</glossterm> 。
      </para>

      <para>当缓存中的对象在事务的环境下被修改了，
      那么直到事务提交成功后，修改才被复制。
      所有的修改都被保存在调用程序事务的列表里面，
      当事务提交时，我们就复制修改。
      反之，当回滚时，我们仅仅在本地取消修改，网络流量和开销是零。
      举例来说，如果调用程序做了 100 处修改，然后又回滚了事务，
      我们不会复制任何东西，所以也就没有网络流量。
      </para>

      <para>如果调用程序没有绑定到一个事务（而且隔离层次不是 NONE，后面会详细讲解），
      每次修改都会发生复制，例如上面举的例子，我们就会发出 100 条消息，
      还要附加上额外的回滚信息。
      在这种情况下，我们认为没有事务的运行，类似于 JDBC 术语中的打开自动提交开关的运行，
      在这里每次操作自动提交。
      </para>

      <para>
         JBoss Cache 本身能够与多数流行事务管理器协同工作，
         而且提供了一个 <glossterm linkend="api_gloss">API</glossterm>，
         可以自己编写查找事务管理器的代码。
      </para>

      <para>
         这个缓存技术也是完全线程安全的。
         在缺省的情况下，它在树形节点上使用悲观锁方案，配置选项中也带有乐观锁方案。
         在悲观锁的情况下，通过使用一些隔离层次可以调整并发程度，
         这些隔离层次与数据库风格的事务隔离层次相对应，
         例如 SERIALIZABLE, REPEATABLE_READ, READ_COMMITTED, READ_UNCOMMITTED 和 NONE。
         同时，加锁和隔离层次在后面讨论。
      </para>
   </section>

   <section>
      <title>
         需求
      </title>
      <para>
         JBoss Cache 需要 Java 5.0 （或更高版本）。
      </para>
      <para>
         但是有一个方法可以将 JBoss Cache 构建为与 Java 1.4.x 兼容的二进制格式，
         就是用 <ulink url="http://wiki.jboss.org/wiki/Wiki.jsp?page=JBossRetro">JBossRetro</ulink>
         反向编译 Java 5.0 二进制格式。
         然而，当前红帽子公司对反向编译程序不提供专业支持，
         而且 Java 1.4.x 兼容的二进制格式并没有包含在二进制发布程序中。
         请查看
         <ulink url="http://wiki.jboss.org/wiki/Wiki.jsp?page=JBossCacheHabaneroJava1.4">这个 wiki</ulink>
         页面，上面为您提供了构建反向编译程序的详细介绍。
      </para>
      <para>
         从根本上说，除了 Java 5.0，JBoss Cache 依赖
         <ulink url="http://www.jgroups.org">JGroups</ulink>
         和 Apache 的
         <ulink
                 url="http://jakarta.apache.org/commons/logging/">commons-logging
         </ulink>
         。JBoss Cache 本身带有运行所必须的依赖库。
      </para>
   </section>

   <section>
      <title>许可证</title>
      <para>
         JBoss Cache 是一个开源产品，它使用
         <ulink url="http://www.opensource.org/">OSI 认可的</ulink>
         <ulink url="http://www.gnu.org/copyleft/lesser.html">LGPL 许可证</ulink>，
         这个许可证对商业开发和 OEM 比较友好。
         JBoss Cache 的商业开发支持、产品支持和培训可以通过
         <ulink url="http://www.jboss.com">红帽子公司 JBoss 部门</ulink>得到。
         JBoss Cache 是 JBoss 专业开源
         <ulink url="http://www.jboss.comindex">JEMS</ulink>
         （JBoss Enterprise Middleware Suite，JBoss 企业中间件套件）一部分。
      </para>
   </section>
</chapter>
